// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/asma12a/challenge-s6/ent/footevent"
	"github.com/asma12a/challenge-s6/ent/schema/ulid"
)

// FootEventCreate is the builder for creating a FootEvent entity.
type FootEventCreate struct {
	config
	mutation *FootEventMutation
	hooks    []Hook
}

// SetEventFootID sets the "event_foot_id" field.
func (fec *FootEventCreate) SetEventFootID(s string) *FootEventCreate {
	fec.mutation.SetEventFootID(s)
	return fec
}

// SetTeamA sets the "team_A" field.
func (fec *FootEventCreate) SetTeamA(s string) *FootEventCreate {
	fec.mutation.SetTeamA(s)
	return fec
}

// SetTeamB sets the "team_B" field.
func (fec *FootEventCreate) SetTeamB(s string) *FootEventCreate {
	fec.mutation.SetTeamB(s)
	return fec
}

// SetID sets the "id" field.
func (fec *FootEventCreate) SetID(u ulid.ID) *FootEventCreate {
	fec.mutation.SetID(u)
	return fec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (fec *FootEventCreate) SetNillableID(u *ulid.ID) *FootEventCreate {
	if u != nil {
		fec.SetID(*u)
	}
	return fec
}

// Mutation returns the FootEventMutation object of the builder.
func (fec *FootEventCreate) Mutation() *FootEventMutation {
	return fec.mutation
}

// Save creates the FootEvent in the database.
func (fec *FootEventCreate) Save(ctx context.Context) (*FootEvent, error) {
	fec.defaults()
	return withHooks(ctx, fec.sqlSave, fec.mutation, fec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fec *FootEventCreate) SaveX(ctx context.Context) *FootEvent {
	v, err := fec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fec *FootEventCreate) Exec(ctx context.Context) error {
	_, err := fec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fec *FootEventCreate) ExecX(ctx context.Context) {
	if err := fec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fec *FootEventCreate) defaults() {
	if _, ok := fec.mutation.ID(); !ok {
		v := footevent.DefaultID()
		fec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fec *FootEventCreate) check() error {
	if _, ok := fec.mutation.EventFootID(); !ok {
		return &ValidationError{Name: "event_foot_id", err: errors.New(`ent: missing required field "FootEvent.event_foot_id"`)}
	}
	if v, ok := fec.mutation.EventFootID(); ok {
		if err := footevent.EventFootIDValidator(v); err != nil {
			return &ValidationError{Name: "event_foot_id", err: fmt.Errorf(`ent: validator failed for field "FootEvent.event_foot_id": %w`, err)}
		}
	}
	if _, ok := fec.mutation.TeamA(); !ok {
		return &ValidationError{Name: "team_A", err: errors.New(`ent: missing required field "FootEvent.team_A"`)}
	}
	if v, ok := fec.mutation.TeamA(); ok {
		if err := footevent.TeamAValidator(v); err != nil {
			return &ValidationError{Name: "team_A", err: fmt.Errorf(`ent: validator failed for field "FootEvent.team_A": %w`, err)}
		}
	}
	if _, ok := fec.mutation.TeamB(); !ok {
		return &ValidationError{Name: "team_B", err: errors.New(`ent: missing required field "FootEvent.team_B"`)}
	}
	if v, ok := fec.mutation.TeamB(); ok {
		if err := footevent.TeamBValidator(v); err != nil {
			return &ValidationError{Name: "team_B", err: fmt.Errorf(`ent: validator failed for field "FootEvent.team_B": %w`, err)}
		}
	}
	return nil
}

func (fec *FootEventCreate) sqlSave(ctx context.Context) (*FootEvent, error) {
	if err := fec.check(); err != nil {
		return nil, err
	}
	_node, _spec := fec.createSpec()
	if err := sqlgraph.CreateNode(ctx, fec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*ulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	fec.mutation.id = &_node.ID
	fec.mutation.done = true
	return _node, nil
}

func (fec *FootEventCreate) createSpec() (*FootEvent, *sqlgraph.CreateSpec) {
	var (
		_node = &FootEvent{config: fec.config}
		_spec = sqlgraph.NewCreateSpec(footevent.Table, sqlgraph.NewFieldSpec(footevent.FieldID, field.TypeString))
	)
	if id, ok := fec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := fec.mutation.EventFootID(); ok {
		_spec.SetField(footevent.FieldEventFootID, field.TypeString, value)
		_node.EventFootID = value
	}
	if value, ok := fec.mutation.TeamA(); ok {
		_spec.SetField(footevent.FieldTeamA, field.TypeString, value)
		_node.TeamA = value
	}
	if value, ok := fec.mutation.TeamB(); ok {
		_spec.SetField(footevent.FieldTeamB, field.TypeString, value)
		_node.TeamB = value
	}
	return _node, _spec
}

// FootEventCreateBulk is the builder for creating many FootEvent entities in bulk.
type FootEventCreateBulk struct {
	config
	err      error
	builders []*FootEventCreate
}

// Save creates the FootEvent entities in the database.
func (fecb *FootEventCreateBulk) Save(ctx context.Context) ([]*FootEvent, error) {
	if fecb.err != nil {
		return nil, fecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fecb.builders))
	nodes := make([]*FootEvent, len(fecb.builders))
	mutators := make([]Mutator, len(fecb.builders))
	for i := range fecb.builders {
		func(i int, root context.Context) {
			builder := fecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FootEventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fecb *FootEventCreateBulk) SaveX(ctx context.Context) []*FootEvent {
	v, err := fecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fecb *FootEventCreateBulk) Exec(ctx context.Context) error {
	_, err := fecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fecb *FootEventCreateBulk) ExecX(ctx context.Context) {
	if err := fecb.Exec(ctx); err != nil {
		panic(err)
	}
}
