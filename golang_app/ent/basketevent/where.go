// Code generated by ent, DO NOT EDIT.

package basketevent

import (
	"entgo.io/ent/dialect/sql"
	"github.com/asma12a/challenge-s6/ent/predicate"
	"github.com/asma12a/challenge-s6/ent/schema/ulid"
)

// ID filters vertices based on their ID field.
func ID(id ulid.ID) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id ulid.ID) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id ulid.ID) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...ulid.ID) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...ulid.ID) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id ulid.ID) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id ulid.ID) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id ulid.ID) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id ulid.ID) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldLTE(FieldID, id))
}

// EventBasketID applies equality check predicate on the "event_basket_id" field. It's identical to EventBasketIDEQ.
func EventBasketID(v string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldEQ(FieldEventBasketID, v))
}

// TeamA applies equality check predicate on the "team_A" field. It's identical to TeamAEQ.
func TeamA(v string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldEQ(FieldTeamA, v))
}

// TeamB applies equality check predicate on the "team_B" field. It's identical to TeamBEQ.
func TeamB(v string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldEQ(FieldTeamB, v))
}

// EventBasketIDEQ applies the EQ predicate on the "event_basket_id" field.
func EventBasketIDEQ(v string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldEQ(FieldEventBasketID, v))
}

// EventBasketIDNEQ applies the NEQ predicate on the "event_basket_id" field.
func EventBasketIDNEQ(v string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldNEQ(FieldEventBasketID, v))
}

// EventBasketIDIn applies the In predicate on the "event_basket_id" field.
func EventBasketIDIn(vs ...string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldIn(FieldEventBasketID, vs...))
}

// EventBasketIDNotIn applies the NotIn predicate on the "event_basket_id" field.
func EventBasketIDNotIn(vs ...string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldNotIn(FieldEventBasketID, vs...))
}

// EventBasketIDGT applies the GT predicate on the "event_basket_id" field.
func EventBasketIDGT(v string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldGT(FieldEventBasketID, v))
}

// EventBasketIDGTE applies the GTE predicate on the "event_basket_id" field.
func EventBasketIDGTE(v string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldGTE(FieldEventBasketID, v))
}

// EventBasketIDLT applies the LT predicate on the "event_basket_id" field.
func EventBasketIDLT(v string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldLT(FieldEventBasketID, v))
}

// EventBasketIDLTE applies the LTE predicate on the "event_basket_id" field.
func EventBasketIDLTE(v string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldLTE(FieldEventBasketID, v))
}

// EventBasketIDContains applies the Contains predicate on the "event_basket_id" field.
func EventBasketIDContains(v string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldContains(FieldEventBasketID, v))
}

// EventBasketIDHasPrefix applies the HasPrefix predicate on the "event_basket_id" field.
func EventBasketIDHasPrefix(v string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldHasPrefix(FieldEventBasketID, v))
}

// EventBasketIDHasSuffix applies the HasSuffix predicate on the "event_basket_id" field.
func EventBasketIDHasSuffix(v string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldHasSuffix(FieldEventBasketID, v))
}

// EventBasketIDEqualFold applies the EqualFold predicate on the "event_basket_id" field.
func EventBasketIDEqualFold(v string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldEqualFold(FieldEventBasketID, v))
}

// EventBasketIDContainsFold applies the ContainsFold predicate on the "event_basket_id" field.
func EventBasketIDContainsFold(v string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldContainsFold(FieldEventBasketID, v))
}

// TeamAEQ applies the EQ predicate on the "team_A" field.
func TeamAEQ(v string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldEQ(FieldTeamA, v))
}

// TeamANEQ applies the NEQ predicate on the "team_A" field.
func TeamANEQ(v string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldNEQ(FieldTeamA, v))
}

// TeamAIn applies the In predicate on the "team_A" field.
func TeamAIn(vs ...string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldIn(FieldTeamA, vs...))
}

// TeamANotIn applies the NotIn predicate on the "team_A" field.
func TeamANotIn(vs ...string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldNotIn(FieldTeamA, vs...))
}

// TeamAGT applies the GT predicate on the "team_A" field.
func TeamAGT(v string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldGT(FieldTeamA, v))
}

// TeamAGTE applies the GTE predicate on the "team_A" field.
func TeamAGTE(v string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldGTE(FieldTeamA, v))
}

// TeamALT applies the LT predicate on the "team_A" field.
func TeamALT(v string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldLT(FieldTeamA, v))
}

// TeamALTE applies the LTE predicate on the "team_A" field.
func TeamALTE(v string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldLTE(FieldTeamA, v))
}

// TeamAContains applies the Contains predicate on the "team_A" field.
func TeamAContains(v string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldContains(FieldTeamA, v))
}

// TeamAHasPrefix applies the HasPrefix predicate on the "team_A" field.
func TeamAHasPrefix(v string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldHasPrefix(FieldTeamA, v))
}

// TeamAHasSuffix applies the HasSuffix predicate on the "team_A" field.
func TeamAHasSuffix(v string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldHasSuffix(FieldTeamA, v))
}

// TeamAEqualFold applies the EqualFold predicate on the "team_A" field.
func TeamAEqualFold(v string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldEqualFold(FieldTeamA, v))
}

// TeamAContainsFold applies the ContainsFold predicate on the "team_A" field.
func TeamAContainsFold(v string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldContainsFold(FieldTeamA, v))
}

// TeamBEQ applies the EQ predicate on the "team_B" field.
func TeamBEQ(v string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldEQ(FieldTeamB, v))
}

// TeamBNEQ applies the NEQ predicate on the "team_B" field.
func TeamBNEQ(v string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldNEQ(FieldTeamB, v))
}

// TeamBIn applies the In predicate on the "team_B" field.
func TeamBIn(vs ...string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldIn(FieldTeamB, vs...))
}

// TeamBNotIn applies the NotIn predicate on the "team_B" field.
func TeamBNotIn(vs ...string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldNotIn(FieldTeamB, vs...))
}

// TeamBGT applies the GT predicate on the "team_B" field.
func TeamBGT(v string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldGT(FieldTeamB, v))
}

// TeamBGTE applies the GTE predicate on the "team_B" field.
func TeamBGTE(v string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldGTE(FieldTeamB, v))
}

// TeamBLT applies the LT predicate on the "team_B" field.
func TeamBLT(v string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldLT(FieldTeamB, v))
}

// TeamBLTE applies the LTE predicate on the "team_B" field.
func TeamBLTE(v string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldLTE(FieldTeamB, v))
}

// TeamBContains applies the Contains predicate on the "team_B" field.
func TeamBContains(v string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldContains(FieldTeamB, v))
}

// TeamBHasPrefix applies the HasPrefix predicate on the "team_B" field.
func TeamBHasPrefix(v string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldHasPrefix(FieldTeamB, v))
}

// TeamBHasSuffix applies the HasSuffix predicate on the "team_B" field.
func TeamBHasSuffix(v string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldHasSuffix(FieldTeamB, v))
}

// TeamBEqualFold applies the EqualFold predicate on the "team_B" field.
func TeamBEqualFold(v string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldEqualFold(FieldTeamB, v))
}

// TeamBContainsFold applies the ContainsFold predicate on the "team_B" field.
func TeamBContainsFold(v string) predicate.BasketEvent {
	return predicate.BasketEvent(sql.FieldContainsFold(FieldTeamB, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BasketEvent) predicate.BasketEvent {
	return predicate.BasketEvent(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BasketEvent) predicate.BasketEvent {
	return predicate.BasketEvent(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BasketEvent) predicate.BasketEvent {
	return predicate.BasketEvent(sql.NotPredicates(p))
}
