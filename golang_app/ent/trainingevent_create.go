// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/asma12a/challenge-s6/ent/schema/ulid"
	"github.com/asma12a/challenge-s6/ent/trainingevent"
)

// TrainingEventCreate is the builder for creating a TrainingEvent entity.
type TrainingEventCreate struct {
	config
	mutation *TrainingEventMutation
	hooks    []Hook
}

// SetEventTrainingID sets the "event_training_id" field.
func (tec *TrainingEventCreate) SetEventTrainingID(s string) *TrainingEventCreate {
	tec.mutation.SetEventTrainingID(s)
	return tec
}

// SetTeamID sets the "team_id" field.
func (tec *TrainingEventCreate) SetTeamID(s string) *TrainingEventCreate {
	tec.mutation.SetTeamID(s)
	return tec
}

// SetID sets the "id" field.
func (tec *TrainingEventCreate) SetID(u ulid.ID) *TrainingEventCreate {
	tec.mutation.SetID(u)
	return tec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tec *TrainingEventCreate) SetNillableID(u *ulid.ID) *TrainingEventCreate {
	if u != nil {
		tec.SetID(*u)
	}
	return tec
}

// Mutation returns the TrainingEventMutation object of the builder.
func (tec *TrainingEventCreate) Mutation() *TrainingEventMutation {
	return tec.mutation
}

// Save creates the TrainingEvent in the database.
func (tec *TrainingEventCreate) Save(ctx context.Context) (*TrainingEvent, error) {
	tec.defaults()
	return withHooks(ctx, tec.sqlSave, tec.mutation, tec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tec *TrainingEventCreate) SaveX(ctx context.Context) *TrainingEvent {
	v, err := tec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tec *TrainingEventCreate) Exec(ctx context.Context) error {
	_, err := tec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tec *TrainingEventCreate) ExecX(ctx context.Context) {
	if err := tec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tec *TrainingEventCreate) defaults() {
	if _, ok := tec.mutation.ID(); !ok {
		v := trainingevent.DefaultID()
		tec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tec *TrainingEventCreate) check() error {
	if _, ok := tec.mutation.EventTrainingID(); !ok {
		return &ValidationError{Name: "event_training_id", err: errors.New(`ent: missing required field "TrainingEvent.event_training_id"`)}
	}
	if v, ok := tec.mutation.EventTrainingID(); ok {
		if err := trainingevent.EventTrainingIDValidator(v); err != nil {
			return &ValidationError{Name: "event_training_id", err: fmt.Errorf(`ent: validator failed for field "TrainingEvent.event_training_id": %w`, err)}
		}
	}
	if _, ok := tec.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team_id", err: errors.New(`ent: missing required field "TrainingEvent.team_id"`)}
	}
	if v, ok := tec.mutation.TeamID(); ok {
		if err := trainingevent.TeamIDValidator(v); err != nil {
			return &ValidationError{Name: "team_id", err: fmt.Errorf(`ent: validator failed for field "TrainingEvent.team_id": %w`, err)}
		}
	}
	return nil
}

func (tec *TrainingEventCreate) sqlSave(ctx context.Context) (*TrainingEvent, error) {
	if err := tec.check(); err != nil {
		return nil, err
	}
	_node, _spec := tec.createSpec()
	if err := sqlgraph.CreateNode(ctx, tec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*ulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tec.mutation.id = &_node.ID
	tec.mutation.done = true
	return _node, nil
}

func (tec *TrainingEventCreate) createSpec() (*TrainingEvent, *sqlgraph.CreateSpec) {
	var (
		_node = &TrainingEvent{config: tec.config}
		_spec = sqlgraph.NewCreateSpec(trainingevent.Table, sqlgraph.NewFieldSpec(trainingevent.FieldID, field.TypeString))
	)
	if id, ok := tec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tec.mutation.EventTrainingID(); ok {
		_spec.SetField(trainingevent.FieldEventTrainingID, field.TypeString, value)
		_node.EventTrainingID = value
	}
	if value, ok := tec.mutation.TeamID(); ok {
		_spec.SetField(trainingevent.FieldTeamID, field.TypeString, value)
		_node.TeamID = value
	}
	return _node, _spec
}

// TrainingEventCreateBulk is the builder for creating many TrainingEvent entities in bulk.
type TrainingEventCreateBulk struct {
	config
	err      error
	builders []*TrainingEventCreate
}

// Save creates the TrainingEvent entities in the database.
func (tecb *TrainingEventCreateBulk) Save(ctx context.Context) ([]*TrainingEvent, error) {
	if tecb.err != nil {
		return nil, tecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tecb.builders))
	nodes := make([]*TrainingEvent, len(tecb.builders))
	mutators := make([]Mutator, len(tecb.builders))
	for i := range tecb.builders {
		func(i int, root context.Context) {
			builder := tecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TrainingEventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tecb *TrainingEventCreateBulk) SaveX(ctx context.Context) []*TrainingEvent {
	v, err := tecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tecb *TrainingEventCreateBulk) Exec(ctx context.Context) error {
	_, err := tecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tecb *TrainingEventCreateBulk) ExecX(ctx context.Context) {
	if err := tecb.Exec(ctx); err != nil {
		panic(err)
	}
}
