// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/asma12a/challenge-s6/ent/basketevent"
	"github.com/asma12a/challenge-s6/ent/schema/ulid"
)

// BasketEventCreate is the builder for creating a BasketEvent entity.
type BasketEventCreate struct {
	config
	mutation *BasketEventMutation
	hooks    []Hook
}

// SetEventBasketID sets the "event_basket_id" field.
func (bec *BasketEventCreate) SetEventBasketID(s string) *BasketEventCreate {
	bec.mutation.SetEventBasketID(s)
	return bec
}

// SetTeamAID sets the "team_A_id" field.
func (bec *BasketEventCreate) SetTeamAID(s string) *BasketEventCreate {
	bec.mutation.SetTeamAID(s)
	return bec
}

// SetTeamBID sets the "team_B_id" field.
func (bec *BasketEventCreate) SetTeamBID(s string) *BasketEventCreate {
	bec.mutation.SetTeamBID(s)
	return bec
}

// SetID sets the "id" field.
func (bec *BasketEventCreate) SetID(u ulid.ID) *BasketEventCreate {
	bec.mutation.SetID(u)
	return bec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bec *BasketEventCreate) SetNillableID(u *ulid.ID) *BasketEventCreate {
	if u != nil {
		bec.SetID(*u)
	}
	return bec
}

// Mutation returns the BasketEventMutation object of the builder.
func (bec *BasketEventCreate) Mutation() *BasketEventMutation {
	return bec.mutation
}

// Save creates the BasketEvent in the database.
func (bec *BasketEventCreate) Save(ctx context.Context) (*BasketEvent, error) {
	bec.defaults()
	return withHooks(ctx, bec.sqlSave, bec.mutation, bec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bec *BasketEventCreate) SaveX(ctx context.Context) *BasketEvent {
	v, err := bec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bec *BasketEventCreate) Exec(ctx context.Context) error {
	_, err := bec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bec *BasketEventCreate) ExecX(ctx context.Context) {
	if err := bec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bec *BasketEventCreate) defaults() {
	if _, ok := bec.mutation.ID(); !ok {
		v := basketevent.DefaultID()
		bec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bec *BasketEventCreate) check() error {
	if _, ok := bec.mutation.EventBasketID(); !ok {
		return &ValidationError{Name: "event_basket_id", err: errors.New(`ent: missing required field "BasketEvent.event_basket_id"`)}
	}
	if v, ok := bec.mutation.EventBasketID(); ok {
		if err := basketevent.EventBasketIDValidator(v); err != nil {
			return &ValidationError{Name: "event_basket_id", err: fmt.Errorf(`ent: validator failed for field "BasketEvent.event_basket_id": %w`, err)}
		}
	}
	if _, ok := bec.mutation.TeamAID(); !ok {
		return &ValidationError{Name: "team_A_id", err: errors.New(`ent: missing required field "BasketEvent.team_A_id"`)}
	}
	if v, ok := bec.mutation.TeamAID(); ok {
		if err := basketevent.TeamAIDValidator(v); err != nil {
			return &ValidationError{Name: "team_A_id", err: fmt.Errorf(`ent: validator failed for field "BasketEvent.team_A_id": %w`, err)}
		}
	}
	if _, ok := bec.mutation.TeamBID(); !ok {
		return &ValidationError{Name: "team_B_id", err: errors.New(`ent: missing required field "BasketEvent.team_B_id"`)}
	}
	if v, ok := bec.mutation.TeamBID(); ok {
		if err := basketevent.TeamBIDValidator(v); err != nil {
			return &ValidationError{Name: "team_B_id", err: fmt.Errorf(`ent: validator failed for field "BasketEvent.team_B_id": %w`, err)}
		}
	}
	return nil
}

func (bec *BasketEventCreate) sqlSave(ctx context.Context) (*BasketEvent, error) {
	if err := bec.check(); err != nil {
		return nil, err
	}
	_node, _spec := bec.createSpec()
	if err := sqlgraph.CreateNode(ctx, bec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*ulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	bec.mutation.id = &_node.ID
	bec.mutation.done = true
	return _node, nil
}

func (bec *BasketEventCreate) createSpec() (*BasketEvent, *sqlgraph.CreateSpec) {
	var (
		_node = &BasketEvent{config: bec.config}
		_spec = sqlgraph.NewCreateSpec(basketevent.Table, sqlgraph.NewFieldSpec(basketevent.FieldID, field.TypeString))
	)
	if id, ok := bec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := bec.mutation.EventBasketID(); ok {
		_spec.SetField(basketevent.FieldEventBasketID, field.TypeString, value)
		_node.EventBasketID = value
	}
	if value, ok := bec.mutation.TeamAID(); ok {
		_spec.SetField(basketevent.FieldTeamAID, field.TypeString, value)
		_node.TeamAID = value
	}
	if value, ok := bec.mutation.TeamBID(); ok {
		_spec.SetField(basketevent.FieldTeamBID, field.TypeString, value)
		_node.TeamBID = value
	}
	return _node, _spec
}

// BasketEventCreateBulk is the builder for creating many BasketEvent entities in bulk.
type BasketEventCreateBulk struct {
	config
	err      error
	builders []*BasketEventCreate
}

// Save creates the BasketEvent entities in the database.
func (becb *BasketEventCreateBulk) Save(ctx context.Context) ([]*BasketEvent, error) {
	if becb.err != nil {
		return nil, becb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(becb.builders))
	nodes := make([]*BasketEvent, len(becb.builders))
	mutators := make([]Mutator, len(becb.builders))
	for i := range becb.builders {
		func(i int, root context.Context) {
			builder := becb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BasketEventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, becb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, becb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, becb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (becb *BasketEventCreateBulk) SaveX(ctx context.Context) []*BasketEvent {
	v, err := becb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (becb *BasketEventCreateBulk) Exec(ctx context.Context) error {
	_, err := becb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (becb *BasketEventCreateBulk) ExecX(ctx context.Context) {
	if err := becb.Exec(ctx); err != nil {
		panic(err)
	}
}
