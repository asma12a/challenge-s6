// Code generated by ent, DO NOT EDIT.

package tennisevent

import (
	"entgo.io/ent/dialect/sql"
	"github.com/asma12a/challenge-s6/ent/predicate"
	"github.com/asma12a/challenge-s6/ent/schema/ulid"
)

// ID filters vertices based on their ID field.
func ID(id ulid.ID) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id ulid.ID) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id ulid.ID) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...ulid.ID) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...ulid.ID) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id ulid.ID) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id ulid.ID) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id ulid.ID) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id ulid.ID) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldLTE(FieldID, id))
}

// EventTennisID applies equality check predicate on the "event_tennis_id" field. It's identical to EventTennisIDEQ.
func EventTennisID(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldEQ(FieldEventTennisID, v))
}

// TeamAID applies equality check predicate on the "team_A_id" field. It's identical to TeamAIDEQ.
func TeamAID(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldEQ(FieldTeamAID, v))
}

// TeamBID applies equality check predicate on the "team_B_id" field. It's identical to TeamBIDEQ.
func TeamBID(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldEQ(FieldTeamBID, v))
}

// EventTennisIDEQ applies the EQ predicate on the "event_tennis_id" field.
func EventTennisIDEQ(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldEQ(FieldEventTennisID, v))
}

// EventTennisIDNEQ applies the NEQ predicate on the "event_tennis_id" field.
func EventTennisIDNEQ(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldNEQ(FieldEventTennisID, v))
}

// EventTennisIDIn applies the In predicate on the "event_tennis_id" field.
func EventTennisIDIn(vs ...string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldIn(FieldEventTennisID, vs...))
}

// EventTennisIDNotIn applies the NotIn predicate on the "event_tennis_id" field.
func EventTennisIDNotIn(vs ...string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldNotIn(FieldEventTennisID, vs...))
}

// EventTennisIDGT applies the GT predicate on the "event_tennis_id" field.
func EventTennisIDGT(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldGT(FieldEventTennisID, v))
}

// EventTennisIDGTE applies the GTE predicate on the "event_tennis_id" field.
func EventTennisIDGTE(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldGTE(FieldEventTennisID, v))
}

// EventTennisIDLT applies the LT predicate on the "event_tennis_id" field.
func EventTennisIDLT(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldLT(FieldEventTennisID, v))
}

// EventTennisIDLTE applies the LTE predicate on the "event_tennis_id" field.
func EventTennisIDLTE(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldLTE(FieldEventTennisID, v))
}

// EventTennisIDContains applies the Contains predicate on the "event_tennis_id" field.
func EventTennisIDContains(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldContains(FieldEventTennisID, v))
}

// EventTennisIDHasPrefix applies the HasPrefix predicate on the "event_tennis_id" field.
func EventTennisIDHasPrefix(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldHasPrefix(FieldEventTennisID, v))
}

// EventTennisIDHasSuffix applies the HasSuffix predicate on the "event_tennis_id" field.
func EventTennisIDHasSuffix(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldHasSuffix(FieldEventTennisID, v))
}

// EventTennisIDEqualFold applies the EqualFold predicate on the "event_tennis_id" field.
func EventTennisIDEqualFold(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldEqualFold(FieldEventTennisID, v))
}

// EventTennisIDContainsFold applies the ContainsFold predicate on the "event_tennis_id" field.
func EventTennisIDContainsFold(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldContainsFold(FieldEventTennisID, v))
}

// TeamAIDEQ applies the EQ predicate on the "team_A_id" field.
func TeamAIDEQ(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldEQ(FieldTeamAID, v))
}

// TeamAIDNEQ applies the NEQ predicate on the "team_A_id" field.
func TeamAIDNEQ(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldNEQ(FieldTeamAID, v))
}

// TeamAIDIn applies the In predicate on the "team_A_id" field.
func TeamAIDIn(vs ...string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldIn(FieldTeamAID, vs...))
}

// TeamAIDNotIn applies the NotIn predicate on the "team_A_id" field.
func TeamAIDNotIn(vs ...string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldNotIn(FieldTeamAID, vs...))
}

// TeamAIDGT applies the GT predicate on the "team_A_id" field.
func TeamAIDGT(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldGT(FieldTeamAID, v))
}

// TeamAIDGTE applies the GTE predicate on the "team_A_id" field.
func TeamAIDGTE(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldGTE(FieldTeamAID, v))
}

// TeamAIDLT applies the LT predicate on the "team_A_id" field.
func TeamAIDLT(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldLT(FieldTeamAID, v))
}

// TeamAIDLTE applies the LTE predicate on the "team_A_id" field.
func TeamAIDLTE(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldLTE(FieldTeamAID, v))
}

// TeamAIDContains applies the Contains predicate on the "team_A_id" field.
func TeamAIDContains(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldContains(FieldTeamAID, v))
}

// TeamAIDHasPrefix applies the HasPrefix predicate on the "team_A_id" field.
func TeamAIDHasPrefix(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldHasPrefix(FieldTeamAID, v))
}

// TeamAIDHasSuffix applies the HasSuffix predicate on the "team_A_id" field.
func TeamAIDHasSuffix(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldHasSuffix(FieldTeamAID, v))
}

// TeamAIDEqualFold applies the EqualFold predicate on the "team_A_id" field.
func TeamAIDEqualFold(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldEqualFold(FieldTeamAID, v))
}

// TeamAIDContainsFold applies the ContainsFold predicate on the "team_A_id" field.
func TeamAIDContainsFold(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldContainsFold(FieldTeamAID, v))
}

// TeamBIDEQ applies the EQ predicate on the "team_B_id" field.
func TeamBIDEQ(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldEQ(FieldTeamBID, v))
}

// TeamBIDNEQ applies the NEQ predicate on the "team_B_id" field.
func TeamBIDNEQ(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldNEQ(FieldTeamBID, v))
}

// TeamBIDIn applies the In predicate on the "team_B_id" field.
func TeamBIDIn(vs ...string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldIn(FieldTeamBID, vs...))
}

// TeamBIDNotIn applies the NotIn predicate on the "team_B_id" field.
func TeamBIDNotIn(vs ...string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldNotIn(FieldTeamBID, vs...))
}

// TeamBIDGT applies the GT predicate on the "team_B_id" field.
func TeamBIDGT(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldGT(FieldTeamBID, v))
}

// TeamBIDGTE applies the GTE predicate on the "team_B_id" field.
func TeamBIDGTE(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldGTE(FieldTeamBID, v))
}

// TeamBIDLT applies the LT predicate on the "team_B_id" field.
func TeamBIDLT(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldLT(FieldTeamBID, v))
}

// TeamBIDLTE applies the LTE predicate on the "team_B_id" field.
func TeamBIDLTE(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldLTE(FieldTeamBID, v))
}

// TeamBIDContains applies the Contains predicate on the "team_B_id" field.
func TeamBIDContains(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldContains(FieldTeamBID, v))
}

// TeamBIDHasPrefix applies the HasPrefix predicate on the "team_B_id" field.
func TeamBIDHasPrefix(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldHasPrefix(FieldTeamBID, v))
}

// TeamBIDHasSuffix applies the HasSuffix predicate on the "team_B_id" field.
func TeamBIDHasSuffix(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldHasSuffix(FieldTeamBID, v))
}

// TeamBIDEqualFold applies the EqualFold predicate on the "team_B_id" field.
func TeamBIDEqualFold(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldEqualFold(FieldTeamBID, v))
}

// TeamBIDContainsFold applies the ContainsFold predicate on the "team_B_id" field.
func TeamBIDContainsFold(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldContainsFold(FieldTeamBID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TennisEvent) predicate.TennisEvent {
	return predicate.TennisEvent(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TennisEvent) predicate.TennisEvent {
	return predicate.TennisEvent(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TennisEvent) predicate.TennisEvent {
	return predicate.TennisEvent(sql.NotPredicates(p))
}
