// Code generated by ent, DO NOT EDIT.

package tennisevent

import (
	"entgo.io/ent/dialect/sql"
	"github.com/asma12a/challenge-s6/ent/predicate"
	"github.com/asma12a/challenge-s6/ent/schema/ulid"
)

// ID filters vertices based on their ID field.
func ID(id ulid.ID) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id ulid.ID) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id ulid.ID) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...ulid.ID) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...ulid.ID) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id ulid.ID) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id ulid.ID) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id ulid.ID) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id ulid.ID) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldLTE(FieldID, id))
}

// EventTennisID applies equality check predicate on the "event_tennis_id" field. It's identical to EventTennisIDEQ.
func EventTennisID(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldEQ(FieldEventTennisID, v))
}

// TeamA applies equality check predicate on the "team_A" field. It's identical to TeamAEQ.
func TeamA(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldEQ(FieldTeamA, v))
}

// TeamB applies equality check predicate on the "team_B" field. It's identical to TeamBEQ.
func TeamB(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldEQ(FieldTeamB, v))
}

// EventTennisIDEQ applies the EQ predicate on the "event_tennis_id" field.
func EventTennisIDEQ(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldEQ(FieldEventTennisID, v))
}

// EventTennisIDNEQ applies the NEQ predicate on the "event_tennis_id" field.
func EventTennisIDNEQ(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldNEQ(FieldEventTennisID, v))
}

// EventTennisIDIn applies the In predicate on the "event_tennis_id" field.
func EventTennisIDIn(vs ...string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldIn(FieldEventTennisID, vs...))
}

// EventTennisIDNotIn applies the NotIn predicate on the "event_tennis_id" field.
func EventTennisIDNotIn(vs ...string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldNotIn(FieldEventTennisID, vs...))
}

// EventTennisIDGT applies the GT predicate on the "event_tennis_id" field.
func EventTennisIDGT(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldGT(FieldEventTennisID, v))
}

// EventTennisIDGTE applies the GTE predicate on the "event_tennis_id" field.
func EventTennisIDGTE(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldGTE(FieldEventTennisID, v))
}

// EventTennisIDLT applies the LT predicate on the "event_tennis_id" field.
func EventTennisIDLT(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldLT(FieldEventTennisID, v))
}

// EventTennisIDLTE applies the LTE predicate on the "event_tennis_id" field.
func EventTennisIDLTE(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldLTE(FieldEventTennisID, v))
}

// EventTennisIDContains applies the Contains predicate on the "event_tennis_id" field.
func EventTennisIDContains(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldContains(FieldEventTennisID, v))
}

// EventTennisIDHasPrefix applies the HasPrefix predicate on the "event_tennis_id" field.
func EventTennisIDHasPrefix(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldHasPrefix(FieldEventTennisID, v))
}

// EventTennisIDHasSuffix applies the HasSuffix predicate on the "event_tennis_id" field.
func EventTennisIDHasSuffix(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldHasSuffix(FieldEventTennisID, v))
}

// EventTennisIDEqualFold applies the EqualFold predicate on the "event_tennis_id" field.
func EventTennisIDEqualFold(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldEqualFold(FieldEventTennisID, v))
}

// EventTennisIDContainsFold applies the ContainsFold predicate on the "event_tennis_id" field.
func EventTennisIDContainsFold(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldContainsFold(FieldEventTennisID, v))
}

// TeamAEQ applies the EQ predicate on the "team_A" field.
func TeamAEQ(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldEQ(FieldTeamA, v))
}

// TeamANEQ applies the NEQ predicate on the "team_A" field.
func TeamANEQ(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldNEQ(FieldTeamA, v))
}

// TeamAIn applies the In predicate on the "team_A" field.
func TeamAIn(vs ...string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldIn(FieldTeamA, vs...))
}

// TeamANotIn applies the NotIn predicate on the "team_A" field.
func TeamANotIn(vs ...string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldNotIn(FieldTeamA, vs...))
}

// TeamAGT applies the GT predicate on the "team_A" field.
func TeamAGT(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldGT(FieldTeamA, v))
}

// TeamAGTE applies the GTE predicate on the "team_A" field.
func TeamAGTE(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldGTE(FieldTeamA, v))
}

// TeamALT applies the LT predicate on the "team_A" field.
func TeamALT(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldLT(FieldTeamA, v))
}

// TeamALTE applies the LTE predicate on the "team_A" field.
func TeamALTE(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldLTE(FieldTeamA, v))
}

// TeamAContains applies the Contains predicate on the "team_A" field.
func TeamAContains(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldContains(FieldTeamA, v))
}

// TeamAHasPrefix applies the HasPrefix predicate on the "team_A" field.
func TeamAHasPrefix(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldHasPrefix(FieldTeamA, v))
}

// TeamAHasSuffix applies the HasSuffix predicate on the "team_A" field.
func TeamAHasSuffix(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldHasSuffix(FieldTeamA, v))
}

// TeamAEqualFold applies the EqualFold predicate on the "team_A" field.
func TeamAEqualFold(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldEqualFold(FieldTeamA, v))
}

// TeamAContainsFold applies the ContainsFold predicate on the "team_A" field.
func TeamAContainsFold(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldContainsFold(FieldTeamA, v))
}

// TeamBEQ applies the EQ predicate on the "team_B" field.
func TeamBEQ(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldEQ(FieldTeamB, v))
}

// TeamBNEQ applies the NEQ predicate on the "team_B" field.
func TeamBNEQ(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldNEQ(FieldTeamB, v))
}

// TeamBIn applies the In predicate on the "team_B" field.
func TeamBIn(vs ...string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldIn(FieldTeamB, vs...))
}

// TeamBNotIn applies the NotIn predicate on the "team_B" field.
func TeamBNotIn(vs ...string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldNotIn(FieldTeamB, vs...))
}

// TeamBGT applies the GT predicate on the "team_B" field.
func TeamBGT(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldGT(FieldTeamB, v))
}

// TeamBGTE applies the GTE predicate on the "team_B" field.
func TeamBGTE(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldGTE(FieldTeamB, v))
}

// TeamBLT applies the LT predicate on the "team_B" field.
func TeamBLT(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldLT(FieldTeamB, v))
}

// TeamBLTE applies the LTE predicate on the "team_B" field.
func TeamBLTE(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldLTE(FieldTeamB, v))
}

// TeamBContains applies the Contains predicate on the "team_B" field.
func TeamBContains(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldContains(FieldTeamB, v))
}

// TeamBHasPrefix applies the HasPrefix predicate on the "team_B" field.
func TeamBHasPrefix(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldHasPrefix(FieldTeamB, v))
}

// TeamBHasSuffix applies the HasSuffix predicate on the "team_B" field.
func TeamBHasSuffix(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldHasSuffix(FieldTeamB, v))
}

// TeamBEqualFold applies the EqualFold predicate on the "team_B" field.
func TeamBEqualFold(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldEqualFold(FieldTeamB, v))
}

// TeamBContainsFold applies the ContainsFold predicate on the "team_B" field.
func TeamBContainsFold(v string) predicate.TennisEvent {
	return predicate.TennisEvent(sql.FieldContainsFold(FieldTeamB, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TennisEvent) predicate.TennisEvent {
	return predicate.TennisEvent(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TennisEvent) predicate.TennisEvent {
	return predicate.TennisEvent(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TennisEvent) predicate.TennisEvent {
	return predicate.TennisEvent(sql.NotPredicates(p))
}
