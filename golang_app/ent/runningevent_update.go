// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/asma12a/challenge-s6/ent/predicate"
	"github.com/asma12a/challenge-s6/ent/runningevent"
)

// RunningEventUpdate is the builder for updating RunningEvent entities.
type RunningEventUpdate struct {
	config
	hooks    []Hook
	mutation *RunningEventMutation
}

// Where appends a list predicates to the RunningEventUpdate builder.
func (reu *RunningEventUpdate) Where(ps ...predicate.RunningEvent) *RunningEventUpdate {
	reu.mutation.Where(ps...)
	return reu
}

// SetEventRunningID sets the "event_running_id" field.
func (reu *RunningEventUpdate) SetEventRunningID(s string) *RunningEventUpdate {
	reu.mutation.SetEventRunningID(s)
	return reu
}

// SetNillableEventRunningID sets the "event_running_id" field if the given value is not nil.
func (reu *RunningEventUpdate) SetNillableEventRunningID(s *string) *RunningEventUpdate {
	if s != nil {
		reu.SetEventRunningID(*s)
	}
	return reu
}

// SetTeamID sets the "team_id" field.
func (reu *RunningEventUpdate) SetTeamID(s string) *RunningEventUpdate {
	reu.mutation.SetTeamID(s)
	return reu
}

// SetNillableTeamID sets the "team_id" field if the given value is not nil.
func (reu *RunningEventUpdate) SetNillableTeamID(s *string) *RunningEventUpdate {
	if s != nil {
		reu.SetTeamID(*s)
	}
	return reu
}

// Mutation returns the RunningEventMutation object of the builder.
func (reu *RunningEventUpdate) Mutation() *RunningEventMutation {
	return reu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (reu *RunningEventUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, reu.sqlSave, reu.mutation, reu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (reu *RunningEventUpdate) SaveX(ctx context.Context) int {
	affected, err := reu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (reu *RunningEventUpdate) Exec(ctx context.Context) error {
	_, err := reu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (reu *RunningEventUpdate) ExecX(ctx context.Context) {
	if err := reu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (reu *RunningEventUpdate) check() error {
	if v, ok := reu.mutation.EventRunningID(); ok {
		if err := runningevent.EventRunningIDValidator(v); err != nil {
			return &ValidationError{Name: "event_running_id", err: fmt.Errorf(`ent: validator failed for field "RunningEvent.event_running_id": %w`, err)}
		}
	}
	if v, ok := reu.mutation.TeamID(); ok {
		if err := runningevent.TeamIDValidator(v); err != nil {
			return &ValidationError{Name: "team_id", err: fmt.Errorf(`ent: validator failed for field "RunningEvent.team_id": %w`, err)}
		}
	}
	return nil
}

func (reu *RunningEventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := reu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(runningevent.Table, runningevent.Columns, sqlgraph.NewFieldSpec(runningevent.FieldID, field.TypeString))
	if ps := reu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := reu.mutation.EventRunningID(); ok {
		_spec.SetField(runningevent.FieldEventRunningID, field.TypeString, value)
	}
	if value, ok := reu.mutation.TeamID(); ok {
		_spec.SetField(runningevent.FieldTeamID, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, reu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{runningevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	reu.mutation.done = true
	return n, nil
}

// RunningEventUpdateOne is the builder for updating a single RunningEvent entity.
type RunningEventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RunningEventMutation
}

// SetEventRunningID sets the "event_running_id" field.
func (reuo *RunningEventUpdateOne) SetEventRunningID(s string) *RunningEventUpdateOne {
	reuo.mutation.SetEventRunningID(s)
	return reuo
}

// SetNillableEventRunningID sets the "event_running_id" field if the given value is not nil.
func (reuo *RunningEventUpdateOne) SetNillableEventRunningID(s *string) *RunningEventUpdateOne {
	if s != nil {
		reuo.SetEventRunningID(*s)
	}
	return reuo
}

// SetTeamID sets the "team_id" field.
func (reuo *RunningEventUpdateOne) SetTeamID(s string) *RunningEventUpdateOne {
	reuo.mutation.SetTeamID(s)
	return reuo
}

// SetNillableTeamID sets the "team_id" field if the given value is not nil.
func (reuo *RunningEventUpdateOne) SetNillableTeamID(s *string) *RunningEventUpdateOne {
	if s != nil {
		reuo.SetTeamID(*s)
	}
	return reuo
}

// Mutation returns the RunningEventMutation object of the builder.
func (reuo *RunningEventUpdateOne) Mutation() *RunningEventMutation {
	return reuo.mutation
}

// Where appends a list predicates to the RunningEventUpdate builder.
func (reuo *RunningEventUpdateOne) Where(ps ...predicate.RunningEvent) *RunningEventUpdateOne {
	reuo.mutation.Where(ps...)
	return reuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (reuo *RunningEventUpdateOne) Select(field string, fields ...string) *RunningEventUpdateOne {
	reuo.fields = append([]string{field}, fields...)
	return reuo
}

// Save executes the query and returns the updated RunningEvent entity.
func (reuo *RunningEventUpdateOne) Save(ctx context.Context) (*RunningEvent, error) {
	return withHooks(ctx, reuo.sqlSave, reuo.mutation, reuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (reuo *RunningEventUpdateOne) SaveX(ctx context.Context) *RunningEvent {
	node, err := reuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (reuo *RunningEventUpdateOne) Exec(ctx context.Context) error {
	_, err := reuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (reuo *RunningEventUpdateOne) ExecX(ctx context.Context) {
	if err := reuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (reuo *RunningEventUpdateOne) check() error {
	if v, ok := reuo.mutation.EventRunningID(); ok {
		if err := runningevent.EventRunningIDValidator(v); err != nil {
			return &ValidationError{Name: "event_running_id", err: fmt.Errorf(`ent: validator failed for field "RunningEvent.event_running_id": %w`, err)}
		}
	}
	if v, ok := reuo.mutation.TeamID(); ok {
		if err := runningevent.TeamIDValidator(v); err != nil {
			return &ValidationError{Name: "team_id", err: fmt.Errorf(`ent: validator failed for field "RunningEvent.team_id": %w`, err)}
		}
	}
	return nil
}

func (reuo *RunningEventUpdateOne) sqlSave(ctx context.Context) (_node *RunningEvent, err error) {
	if err := reuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(runningevent.Table, runningevent.Columns, sqlgraph.NewFieldSpec(runningevent.FieldID, field.TypeString))
	id, ok := reuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RunningEvent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := reuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, runningevent.FieldID)
		for _, f := range fields {
			if !runningevent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != runningevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := reuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := reuo.mutation.EventRunningID(); ok {
		_spec.SetField(runningevent.FieldEventRunningID, field.TypeString, value)
	}
	if value, ok := reuo.mutation.TeamID(); ok {
		_spec.SetField(runningevent.FieldTeamID, field.TypeString, value)
	}
	_node = &RunningEvent{config: reuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, reuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{runningevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	reuo.mutation.done = true
	return _node, nil
}
