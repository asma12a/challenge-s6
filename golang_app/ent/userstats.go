// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/asma12a/challenge-s6/ent/schema/ulid"
	"github.com/asma12a/challenge-s6/ent/userstats"
)

// UserStats is the model entity for the UserStats schema.
type UserStats struct {
	config `json:"-"`
	// ID of the ent.
	ID ulid.ID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// EventID holds the value of the "event_id" field.
	EventID      string `json:"event_id,omitempty"`
	event_id     *ulid.ID
	user_id      *ulid.ID
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserStats) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userstats.FieldUserID, userstats.FieldEventID:
			values[i] = new(sql.NullString)
		case userstats.FieldID:
			values[i] = new(ulid.ID)
		case userstats.ForeignKeys[0]: // event_id
			values[i] = &sql.NullScanner{S: new(ulid.ID)}
		case userstats.ForeignKeys[1]: // user_id
			values[i] = &sql.NullScanner{S: new(ulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserStats fields.
func (us *UserStats) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userstats.FieldID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				us.ID = *value
			}
		case userstats.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				us.UserID = value.String
			}
		case userstats.FieldEventID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_id", values[i])
			} else if value.Valid {
				us.EventID = value.String
			}
		case userstats.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field event_id", values[i])
			} else if value.Valid {
				us.event_id = new(ulid.ID)
				*us.event_id = *value.S.(*ulid.ID)
			}
		case userstats.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				us.user_id = new(ulid.ID)
				*us.user_id = *value.S.(*ulid.ID)
			}
		default:
			us.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserStats.
// This includes values selected through modifiers, order, etc.
func (us *UserStats) Value(name string) (ent.Value, error) {
	return us.selectValues.Get(name)
}

// Update returns a builder for updating this UserStats.
// Note that you need to call UserStats.Unwrap() before calling this method if this UserStats
// was returned from a transaction, and the transaction was committed or rolled back.
func (us *UserStats) Update() *UserStatsUpdateOne {
	return NewUserStatsClient(us.config).UpdateOne(us)
}

// Unwrap unwraps the UserStats entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (us *UserStats) Unwrap() *UserStats {
	_tx, ok := us.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserStats is not a transactional entity")
	}
	us.config.driver = _tx.drv
	return us
}

// String implements the fmt.Stringer.
func (us *UserStats) String() string {
	var builder strings.Builder
	builder.WriteString("UserStats(")
	builder.WriteString(fmt.Sprintf("id=%v, ", us.ID))
	builder.WriteString("user_id=")
	builder.WriteString(us.UserID)
	builder.WriteString(", ")
	builder.WriteString("event_id=")
	builder.WriteString(us.EventID)
	builder.WriteByte(')')
	return builder.String()
}

// UserStatsSlice is a parsable slice of UserStats.
type UserStatsSlice []*UserStats
