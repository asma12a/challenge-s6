// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/asma12a/challenge-s6/ent/event"
	"github.com/asma12a/challenge-s6/ent/predicate"
	"github.com/asma12a/challenge-s6/ent/sport"
)

// SportUpdate is the builder for updating Sport entities.
type SportUpdate struct {
	config
	hooks    []Hook
	mutation *SportMutation
}

// Where appends a list predicates to the SportUpdate builder.
func (su *SportUpdate) Where(ps ...predicate.Sport) *SportUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *SportUpdate) SetName(s string) *SportUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *SportUpdate) SetNillableName(s *string) *SportUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetImageURL sets the "image_url" field.
func (su *SportUpdate) SetImageURL(s string) *SportUpdate {
	su.mutation.SetImageURL(s)
	return su
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (su *SportUpdate) SetNillableImageURL(s *string) *SportUpdate {
	if s != nil {
		su.SetImageURL(*s)
	}
	return su
}

// ClearImageURL clears the value of the "image_url" field.
func (su *SportUpdate) ClearImageURL() *SportUpdate {
	su.mutation.ClearImageURL()
	return su
}

// AddEventIDs adds the "event" edge to the Event entity by IDs.
func (su *SportUpdate) AddEventIDs(ids ...string) *SportUpdate {
	su.mutation.AddEventIDs(ids...)
	return su
}

// AddEvent adds the "event" edges to the Event entity.
func (su *SportUpdate) AddEvent(e ...*Event) *SportUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return su.AddEventIDs(ids...)
}

// Mutation returns the SportMutation object of the builder.
func (su *SportUpdate) Mutation() *SportMutation {
	return su.mutation
}

// ClearEvent clears all "event" edges to the Event entity.
func (su *SportUpdate) ClearEvent() *SportUpdate {
	su.mutation.ClearEvent()
	return su
}

// RemoveEventIDs removes the "event" edge to Event entities by IDs.
func (su *SportUpdate) RemoveEventIDs(ids ...string) *SportUpdate {
	su.mutation.RemoveEventIDs(ids...)
	return su
}

// RemoveEvent removes "event" edges to Event entities.
func (su *SportUpdate) RemoveEvent(e ...*Event) *SportUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return su.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SportUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SportUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SportUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SportUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SportUpdate) check() error {
	if v, ok := su.mutation.Name(); ok {
		if err := sport.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Sport.name": %w`, err)}
		}
	}
	return nil
}

func (su *SportUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sport.Table, sport.Columns, sqlgraph.NewFieldSpec(sport.FieldID, field.TypeString))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(sport.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.ImageURL(); ok {
		_spec.SetField(sport.FieldImageURL, field.TypeString, value)
	}
	if su.mutation.ImageURLCleared() {
		_spec.ClearField(sport.FieldImageURL, field.TypeString)
	}
	if su.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sport.EventTable,
			Columns: []string{sport.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedEventIDs(); len(nodes) > 0 && !su.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sport.EventTable,
			Columns: []string{sport.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sport.EventTable,
			Columns: []string{sport.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SportUpdateOne is the builder for updating a single Sport entity.
type SportUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SportMutation
}

// SetName sets the "name" field.
func (suo *SportUpdateOne) SetName(s string) *SportUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *SportUpdateOne) SetNillableName(s *string) *SportUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetImageURL sets the "image_url" field.
func (suo *SportUpdateOne) SetImageURL(s string) *SportUpdateOne {
	suo.mutation.SetImageURL(s)
	return suo
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (suo *SportUpdateOne) SetNillableImageURL(s *string) *SportUpdateOne {
	if s != nil {
		suo.SetImageURL(*s)
	}
	return suo
}

// ClearImageURL clears the value of the "image_url" field.
func (suo *SportUpdateOne) ClearImageURL() *SportUpdateOne {
	suo.mutation.ClearImageURL()
	return suo
}

// AddEventIDs adds the "event" edge to the Event entity by IDs.
func (suo *SportUpdateOne) AddEventIDs(ids ...string) *SportUpdateOne {
	suo.mutation.AddEventIDs(ids...)
	return suo
}

// AddEvent adds the "event" edges to the Event entity.
func (suo *SportUpdateOne) AddEvent(e ...*Event) *SportUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return suo.AddEventIDs(ids...)
}

// Mutation returns the SportMutation object of the builder.
func (suo *SportUpdateOne) Mutation() *SportMutation {
	return suo.mutation
}

// ClearEvent clears all "event" edges to the Event entity.
func (suo *SportUpdateOne) ClearEvent() *SportUpdateOne {
	suo.mutation.ClearEvent()
	return suo
}

// RemoveEventIDs removes the "event" edge to Event entities by IDs.
func (suo *SportUpdateOne) RemoveEventIDs(ids ...string) *SportUpdateOne {
	suo.mutation.RemoveEventIDs(ids...)
	return suo
}

// RemoveEvent removes "event" edges to Event entities.
func (suo *SportUpdateOne) RemoveEvent(e ...*Event) *SportUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return suo.RemoveEventIDs(ids...)
}

// Where appends a list predicates to the SportUpdate builder.
func (suo *SportUpdateOne) Where(ps ...predicate.Sport) *SportUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SportUpdateOne) Select(field string, fields ...string) *SportUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Sport entity.
func (suo *SportUpdateOne) Save(ctx context.Context) (*Sport, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SportUpdateOne) SaveX(ctx context.Context) *Sport {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SportUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SportUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SportUpdateOne) check() error {
	if v, ok := suo.mutation.Name(); ok {
		if err := sport.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Sport.name": %w`, err)}
		}
	}
	return nil
}

func (suo *SportUpdateOne) sqlSave(ctx context.Context) (_node *Sport, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sport.Table, sport.Columns, sqlgraph.NewFieldSpec(sport.FieldID, field.TypeString))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Sport.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sport.FieldID)
		for _, f := range fields {
			if !sport.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sport.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(sport.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.ImageURL(); ok {
		_spec.SetField(sport.FieldImageURL, field.TypeString, value)
	}
	if suo.mutation.ImageURLCleared() {
		_spec.ClearField(sport.FieldImageURL, field.TypeString)
	}
	if suo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sport.EventTable,
			Columns: []string{sport.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedEventIDs(); len(nodes) > 0 && !suo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sport.EventTable,
			Columns: []string{sport.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sport.EventTable,
			Columns: []string{sport.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Sport{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
