// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/asma12a/challenge-s6/ent/schema/ulid"
	"github.com/asma12a/challenge-s6/ent/tennisevent"
)

// TennisEvent is the model entity for the TennisEvent schema.
type TennisEvent struct {
	config `json:"-"`
	// ID of the ent.
	ID ulid.ID `json:"id,omitempty"`
	// EventTennisID holds the value of the "event_tennis_id" field.
	EventTennisID string `json:"event_tennis_id,omitempty"`
	// TeamAID holds the value of the "team_A_id" field.
	TeamAID string `json:"team_A_id,omitempty"`
	// TeamBID holds the value of the "team_B_id" field.
	TeamBID      string `json:"team_B_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TennisEvent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tennisevent.FieldEventTennisID, tennisevent.FieldTeamAID, tennisevent.FieldTeamBID:
			values[i] = new(sql.NullString)
		case tennisevent.FieldID:
			values[i] = new(ulid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TennisEvent fields.
func (te *TennisEvent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tennisevent.FieldID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				te.ID = *value
			}
		case tennisevent.FieldEventTennisID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_tennis_id", values[i])
			} else if value.Valid {
				te.EventTennisID = value.String
			}
		case tennisevent.FieldTeamAID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field team_A_id", values[i])
			} else if value.Valid {
				te.TeamAID = value.String
			}
		case tennisevent.FieldTeamBID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field team_B_id", values[i])
			} else if value.Valid {
				te.TeamBID = value.String
			}
		default:
			te.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TennisEvent.
// This includes values selected through modifiers, order, etc.
func (te *TennisEvent) Value(name string) (ent.Value, error) {
	return te.selectValues.Get(name)
}

// Update returns a builder for updating this TennisEvent.
// Note that you need to call TennisEvent.Unwrap() before calling this method if this TennisEvent
// was returned from a transaction, and the transaction was committed or rolled back.
func (te *TennisEvent) Update() *TennisEventUpdateOne {
	return NewTennisEventClient(te.config).UpdateOne(te)
}

// Unwrap unwraps the TennisEvent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (te *TennisEvent) Unwrap() *TennisEvent {
	_tx, ok := te.config.driver.(*txDriver)
	if !ok {
		panic("ent: TennisEvent is not a transactional entity")
	}
	te.config.driver = _tx.drv
	return te
}

// String implements the fmt.Stringer.
func (te *TennisEvent) String() string {
	var builder strings.Builder
	builder.WriteString("TennisEvent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", te.ID))
	builder.WriteString("event_tennis_id=")
	builder.WriteString(te.EventTennisID)
	builder.WriteString(", ")
	builder.WriteString("team_A_id=")
	builder.WriteString(te.TeamAID)
	builder.WriteString(", ")
	builder.WriteString("team_B_id=")
	builder.WriteString(te.TeamBID)
	builder.WriteByte(')')
	return builder.String()
}

// TennisEvents is a parsable slice of TennisEvent.
type TennisEvents []*TennisEvent
