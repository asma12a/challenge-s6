// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/asma12a/challenge-s6/ent/predicate"
	"github.com/asma12a/challenge-s6/ent/tennisevent"
)

// TennisEventDelete is the builder for deleting a TennisEvent entity.
type TennisEventDelete struct {
	config
	hooks    []Hook
	mutation *TennisEventMutation
}

// Where appends a list predicates to the TennisEventDelete builder.
func (ted *TennisEventDelete) Where(ps ...predicate.TennisEvent) *TennisEventDelete {
	ted.mutation.Where(ps...)
	return ted
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ted *TennisEventDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ted.sqlExec, ted.mutation, ted.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ted *TennisEventDelete) ExecX(ctx context.Context) int {
	n, err := ted.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ted *TennisEventDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(tennisevent.Table, sqlgraph.NewFieldSpec(tennisevent.FieldID, field.TypeString))
	if ps := ted.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ted.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ted.mutation.done = true
	return affected, err
}

// TennisEventDeleteOne is the builder for deleting a single TennisEvent entity.
type TennisEventDeleteOne struct {
	ted *TennisEventDelete
}

// Where appends a list predicates to the TennisEventDelete builder.
func (tedo *TennisEventDeleteOne) Where(ps ...predicate.TennisEvent) *TennisEventDeleteOne {
	tedo.ted.mutation.Where(ps...)
	return tedo
}

// Exec executes the deletion query.
func (tedo *TennisEventDeleteOne) Exec(ctx context.Context) error {
	n, err := tedo.ted.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{tennisevent.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tedo *TennisEventDeleteOne) ExecX(ctx context.Context) {
	if err := tedo.Exec(ctx); err != nil {
		panic(err)
	}
}
