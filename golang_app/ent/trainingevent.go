// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/asma12a/challenge-s6/ent/schema/ulid"
	"github.com/asma12a/challenge-s6/ent/trainingevent"
)

// TrainingEvent is the model entity for the TrainingEvent schema.
type TrainingEvent struct {
	config `json:"-"`
	// ID of the ent.
	ID ulid.ID `json:"id,omitempty"`
	// EventTrainingID holds the value of the "event_training_id" field.
	EventTrainingID string `json:"event_training_id,omitempty"`
	// TeamID holds the value of the "team_id" field.
	TeamID       string `json:"team_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TrainingEvent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case trainingevent.FieldEventTrainingID, trainingevent.FieldTeamID:
			values[i] = new(sql.NullString)
		case trainingevent.FieldID:
			values[i] = new(ulid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TrainingEvent fields.
func (te *TrainingEvent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case trainingevent.FieldID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				te.ID = *value
			}
		case trainingevent.FieldEventTrainingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_training_id", values[i])
			} else if value.Valid {
				te.EventTrainingID = value.String
			}
		case trainingevent.FieldTeamID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field team_id", values[i])
			} else if value.Valid {
				te.TeamID = value.String
			}
		default:
			te.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TrainingEvent.
// This includes values selected through modifiers, order, etc.
func (te *TrainingEvent) Value(name string) (ent.Value, error) {
	return te.selectValues.Get(name)
}

// Update returns a builder for updating this TrainingEvent.
// Note that you need to call TrainingEvent.Unwrap() before calling this method if this TrainingEvent
// was returned from a transaction, and the transaction was committed or rolled back.
func (te *TrainingEvent) Update() *TrainingEventUpdateOne {
	return NewTrainingEventClient(te.config).UpdateOne(te)
}

// Unwrap unwraps the TrainingEvent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (te *TrainingEvent) Unwrap() *TrainingEvent {
	_tx, ok := te.config.driver.(*txDriver)
	if !ok {
		panic("ent: TrainingEvent is not a transactional entity")
	}
	te.config.driver = _tx.drv
	return te
}

// String implements the fmt.Stringer.
func (te *TrainingEvent) String() string {
	var builder strings.Builder
	builder.WriteString("TrainingEvent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", te.ID))
	builder.WriteString("event_training_id=")
	builder.WriteString(te.EventTrainingID)
	builder.WriteString(", ")
	builder.WriteString("team_id=")
	builder.WriteString(te.TeamID)
	builder.WriteByte(')')
	return builder.String()
}

// TrainingEvents is a parsable slice of TrainingEvent.
type TrainingEvents []*TrainingEvent
