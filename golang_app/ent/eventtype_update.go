// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/asma12a/challenge-s6/ent/event"
	"github.com/asma12a/challenge-s6/ent/eventtype"
	"github.com/asma12a/challenge-s6/ent/predicate"
	"github.com/asma12a/challenge-s6/ent/schema/ulid"
)

// EventTypeUpdate is the builder for updating EventType entities.
type EventTypeUpdate struct {
	config
	hooks    []Hook
	mutation *EventTypeMutation
}

// Where appends a list predicates to the EventTypeUpdate builder.
func (etu *EventTypeUpdate) Where(ps ...predicate.EventType) *EventTypeUpdate {
	etu.mutation.Where(ps...)
	return etu
}

// SetName sets the "name" field.
func (etu *EventTypeUpdate) SetName(s string) *EventTypeUpdate {
	etu.mutation.SetName(s)
	return etu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (etu *EventTypeUpdate) SetNillableName(s *string) *EventTypeUpdate {
	if s != nil {
		etu.SetName(*s)
	}
	return etu
}

// AddEventIDs adds the "event" edge to the Event entity by IDs.
func (etu *EventTypeUpdate) AddEventIDs(ids ...ulid.ID) *EventTypeUpdate {
	etu.mutation.AddEventIDs(ids...)
	return etu
}

// AddEvent adds the "event" edges to the Event entity.
func (etu *EventTypeUpdate) AddEvent(e ...*Event) *EventTypeUpdate {
	ids := make([]ulid.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return etu.AddEventIDs(ids...)
}

// Mutation returns the EventTypeMutation object of the builder.
func (etu *EventTypeUpdate) Mutation() *EventTypeMutation {
	return etu.mutation
}

// ClearEvent clears all "event" edges to the Event entity.
func (etu *EventTypeUpdate) ClearEvent() *EventTypeUpdate {
	etu.mutation.ClearEvent()
	return etu
}

// RemoveEventIDs removes the "event" edge to Event entities by IDs.
func (etu *EventTypeUpdate) RemoveEventIDs(ids ...ulid.ID) *EventTypeUpdate {
	etu.mutation.RemoveEventIDs(ids...)
	return etu
}

// RemoveEvent removes "event" edges to Event entities.
func (etu *EventTypeUpdate) RemoveEvent(e ...*Event) *EventTypeUpdate {
	ids := make([]ulid.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return etu.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (etu *EventTypeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, etu.sqlSave, etu.mutation, etu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (etu *EventTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := etu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (etu *EventTypeUpdate) Exec(ctx context.Context) error {
	_, err := etu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etu *EventTypeUpdate) ExecX(ctx context.Context) {
	if err := etu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (etu *EventTypeUpdate) check() error {
	if v, ok := etu.mutation.Name(); ok {
		if err := eventtype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "EventType.name": %w`, err)}
		}
	}
	return nil
}

func (etu *EventTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := etu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(eventtype.Table, eventtype.Columns, sqlgraph.NewFieldSpec(eventtype.FieldID, field.TypeString))
	if ps := etu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := etu.mutation.Name(); ok {
		_spec.SetField(eventtype.FieldName, field.TypeString, value)
	}
	if etu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eventtype.EventTable,
			Columns: []string{eventtype.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etu.mutation.RemovedEventIDs(); len(nodes) > 0 && !etu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eventtype.EventTable,
			Columns: []string{eventtype.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etu.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eventtype.EventTable,
			Columns: []string{eventtype.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, etu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventtype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	etu.mutation.done = true
	return n, nil
}

// EventTypeUpdateOne is the builder for updating a single EventType entity.
type EventTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventTypeMutation
}

// SetName sets the "name" field.
func (etuo *EventTypeUpdateOne) SetName(s string) *EventTypeUpdateOne {
	etuo.mutation.SetName(s)
	return etuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (etuo *EventTypeUpdateOne) SetNillableName(s *string) *EventTypeUpdateOne {
	if s != nil {
		etuo.SetName(*s)
	}
	return etuo
}

// AddEventIDs adds the "event" edge to the Event entity by IDs.
func (etuo *EventTypeUpdateOne) AddEventIDs(ids ...ulid.ID) *EventTypeUpdateOne {
	etuo.mutation.AddEventIDs(ids...)
	return etuo
}

// AddEvent adds the "event" edges to the Event entity.
func (etuo *EventTypeUpdateOne) AddEvent(e ...*Event) *EventTypeUpdateOne {
	ids := make([]ulid.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return etuo.AddEventIDs(ids...)
}

// Mutation returns the EventTypeMutation object of the builder.
func (etuo *EventTypeUpdateOne) Mutation() *EventTypeMutation {
	return etuo.mutation
}

// ClearEvent clears all "event" edges to the Event entity.
func (etuo *EventTypeUpdateOne) ClearEvent() *EventTypeUpdateOne {
	etuo.mutation.ClearEvent()
	return etuo
}

// RemoveEventIDs removes the "event" edge to Event entities by IDs.
func (etuo *EventTypeUpdateOne) RemoveEventIDs(ids ...ulid.ID) *EventTypeUpdateOne {
	etuo.mutation.RemoveEventIDs(ids...)
	return etuo
}

// RemoveEvent removes "event" edges to Event entities.
func (etuo *EventTypeUpdateOne) RemoveEvent(e ...*Event) *EventTypeUpdateOne {
	ids := make([]ulid.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return etuo.RemoveEventIDs(ids...)
}

// Where appends a list predicates to the EventTypeUpdate builder.
func (etuo *EventTypeUpdateOne) Where(ps ...predicate.EventType) *EventTypeUpdateOne {
	etuo.mutation.Where(ps...)
	return etuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (etuo *EventTypeUpdateOne) Select(field string, fields ...string) *EventTypeUpdateOne {
	etuo.fields = append([]string{field}, fields...)
	return etuo
}

// Save executes the query and returns the updated EventType entity.
func (etuo *EventTypeUpdateOne) Save(ctx context.Context) (*EventType, error) {
	return withHooks(ctx, etuo.sqlSave, etuo.mutation, etuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (etuo *EventTypeUpdateOne) SaveX(ctx context.Context) *EventType {
	node, err := etuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (etuo *EventTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := etuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etuo *EventTypeUpdateOne) ExecX(ctx context.Context) {
	if err := etuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (etuo *EventTypeUpdateOne) check() error {
	if v, ok := etuo.mutation.Name(); ok {
		if err := eventtype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "EventType.name": %w`, err)}
		}
	}
	return nil
}

func (etuo *EventTypeUpdateOne) sqlSave(ctx context.Context) (_node *EventType, err error) {
	if err := etuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(eventtype.Table, eventtype.Columns, sqlgraph.NewFieldSpec(eventtype.FieldID, field.TypeString))
	id, ok := etuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EventType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := etuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, eventtype.FieldID)
		for _, f := range fields {
			if !eventtype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != eventtype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := etuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := etuo.mutation.Name(); ok {
		_spec.SetField(eventtype.FieldName, field.TypeString, value)
	}
	if etuo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eventtype.EventTable,
			Columns: []string{eventtype.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etuo.mutation.RemovedEventIDs(); len(nodes) > 0 && !etuo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eventtype.EventTable,
			Columns: []string{eventtype.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etuo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eventtype.EventTable,
			Columns: []string{eventtype.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EventType{config: etuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, etuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventtype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	etuo.mutation.done = true
	return _node, nil
}
