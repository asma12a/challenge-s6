// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/asma12a/challenge-s6/ent/runningevent"
	"github.com/asma12a/challenge-s6/ent/schema/ulid"
)

// RunningEventCreate is the builder for creating a RunningEvent entity.
type RunningEventCreate struct {
	config
	mutation *RunningEventMutation
	hooks    []Hook
}

// SetEventRunningID sets the "event_running_id" field.
func (rec *RunningEventCreate) SetEventRunningID(s string) *RunningEventCreate {
	rec.mutation.SetEventRunningID(s)
	return rec
}

// SetTeamID sets the "team_id" field.
func (rec *RunningEventCreate) SetTeamID(s string) *RunningEventCreate {
	rec.mutation.SetTeamID(s)
	return rec
}

// SetID sets the "id" field.
func (rec *RunningEventCreate) SetID(u ulid.ID) *RunningEventCreate {
	rec.mutation.SetID(u)
	return rec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rec *RunningEventCreate) SetNillableID(u *ulid.ID) *RunningEventCreate {
	if u != nil {
		rec.SetID(*u)
	}
	return rec
}

// Mutation returns the RunningEventMutation object of the builder.
func (rec *RunningEventCreate) Mutation() *RunningEventMutation {
	return rec.mutation
}

// Save creates the RunningEvent in the database.
func (rec *RunningEventCreate) Save(ctx context.Context) (*RunningEvent, error) {
	rec.defaults()
	return withHooks(ctx, rec.sqlSave, rec.mutation, rec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rec *RunningEventCreate) SaveX(ctx context.Context) *RunningEvent {
	v, err := rec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rec *RunningEventCreate) Exec(ctx context.Context) error {
	_, err := rec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rec *RunningEventCreate) ExecX(ctx context.Context) {
	if err := rec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rec *RunningEventCreate) defaults() {
	if _, ok := rec.mutation.ID(); !ok {
		v := runningevent.DefaultID()
		rec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rec *RunningEventCreate) check() error {
	if _, ok := rec.mutation.EventRunningID(); !ok {
		return &ValidationError{Name: "event_running_id", err: errors.New(`ent: missing required field "RunningEvent.event_running_id"`)}
	}
	if v, ok := rec.mutation.EventRunningID(); ok {
		if err := runningevent.EventRunningIDValidator(v); err != nil {
			return &ValidationError{Name: "event_running_id", err: fmt.Errorf(`ent: validator failed for field "RunningEvent.event_running_id": %w`, err)}
		}
	}
	if _, ok := rec.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team_id", err: errors.New(`ent: missing required field "RunningEvent.team_id"`)}
	}
	if v, ok := rec.mutation.TeamID(); ok {
		if err := runningevent.TeamIDValidator(v); err != nil {
			return &ValidationError{Name: "team_id", err: fmt.Errorf(`ent: validator failed for field "RunningEvent.team_id": %w`, err)}
		}
	}
	return nil
}

func (rec *RunningEventCreate) sqlSave(ctx context.Context) (*RunningEvent, error) {
	if err := rec.check(); err != nil {
		return nil, err
	}
	_node, _spec := rec.createSpec()
	if err := sqlgraph.CreateNode(ctx, rec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*ulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rec.mutation.id = &_node.ID
	rec.mutation.done = true
	return _node, nil
}

func (rec *RunningEventCreate) createSpec() (*RunningEvent, *sqlgraph.CreateSpec) {
	var (
		_node = &RunningEvent{config: rec.config}
		_spec = sqlgraph.NewCreateSpec(runningevent.Table, sqlgraph.NewFieldSpec(runningevent.FieldID, field.TypeString))
	)
	if id, ok := rec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rec.mutation.EventRunningID(); ok {
		_spec.SetField(runningevent.FieldEventRunningID, field.TypeString, value)
		_node.EventRunningID = value
	}
	if value, ok := rec.mutation.TeamID(); ok {
		_spec.SetField(runningevent.FieldTeamID, field.TypeString, value)
		_node.TeamID = value
	}
	return _node, _spec
}

// RunningEventCreateBulk is the builder for creating many RunningEvent entities in bulk.
type RunningEventCreateBulk struct {
	config
	err      error
	builders []*RunningEventCreate
}

// Save creates the RunningEvent entities in the database.
func (recb *RunningEventCreateBulk) Save(ctx context.Context) ([]*RunningEvent, error) {
	if recb.err != nil {
		return nil, recb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(recb.builders))
	nodes := make([]*RunningEvent, len(recb.builders))
	mutators := make([]Mutator, len(recb.builders))
	for i := range recb.builders {
		func(i int, root context.Context) {
			builder := recb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RunningEventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, recb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, recb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, recb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (recb *RunningEventCreateBulk) SaveX(ctx context.Context) []*RunningEvent {
	v, err := recb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (recb *RunningEventCreateBulk) Exec(ctx context.Context) error {
	_, err := recb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (recb *RunningEventCreateBulk) ExecX(ctx context.Context) {
	if err := recb.Exec(ctx); err != nil {
		panic(err)
	}
}
