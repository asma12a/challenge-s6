// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/asma12a/challenge-s6/ent/event"
	"github.com/asma12a/challenge-s6/ent/eventtype"
	"github.com/asma12a/challenge-s6/ent/schema/ulid"
)

// Event is the model entity for the Event schema.
type Event struct {
	config `json:"-"`
	// ID of the ent.
	ID ulid.ID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// EventCode holds the value of the "event_code" field.
	EventCode int16 `json:"event_code,omitempty"`
	// Date holds the value of the "date" field.
	Date string `json:"date,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// IsPublic holds the value of the "is_public" field.
	IsPublic bool `json:"is_public,omitempty"`
	// IsFinished holds the value of the "is_finished" field.
	IsFinished bool `json:"is_finished,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventQuery when eager-loading is set.
	Edges            EventEdges `json:"edges"`
	event_type_event *string
	selectValues     sql.SelectValues
}

// EventEdges holds the relations/edges for other nodes in the graph.
type EventEdges struct {
	// UserStatsID holds the value of the user_stats_id edge.
	UserStatsID []*UserStats `json:"user_stats_id,omitempty"`
	// EventType holds the value of the event_type edge.
	EventType *EventType `json:"event_type,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserStatsIDOrErr returns the UserStatsID value or an error if the edge
// was not loaded in eager-loading.
func (e EventEdges) UserStatsIDOrErr() ([]*UserStats, error) {
	if e.loadedTypes[0] {
		return e.UserStatsID, nil
	}
	return nil, &NotLoadedError{edge: "user_stats_id"}
}

// EventTypeOrErr returns the EventType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) EventTypeOrErr() (*EventType, error) {
	if e.EventType != nil {
		return e.EventType, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: eventtype.Label}
	}
	return nil, &NotLoadedError{edge: "event_type"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Event) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case event.FieldIsPublic, event.FieldIsFinished:
			values[i] = new(sql.NullBool)
		case event.FieldEventCode:
			values[i] = new(sql.NullInt64)
		case event.FieldName, event.FieldAddress, event.FieldDate:
			values[i] = new(sql.NullString)
		case event.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case event.FieldID:
			values[i] = new(ulid.ID)
		case event.ForeignKeys[0]: // event_type_event
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Event fields.
func (e *Event) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case event.FieldID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				e.ID = *value
			}
		case event.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				e.Name = value.String
			}
		case event.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				e.Address = value.String
			}
		case event.FieldEventCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field event_code", values[i])
			} else if value.Valid {
				e.EventCode = int16(value.Int64)
			}
		case event.FieldDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				e.Date = value.String
			}
		case event.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Time
			}
		case event.FieldIsPublic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_public", values[i])
			} else if value.Valid {
				e.IsPublic = value.Bool
			}
		case event.FieldIsFinished:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_finished", values[i])
			} else if value.Valid {
				e.IsFinished = value.Bool
			}
		case event.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_type_event", values[i])
			} else if value.Valid {
				e.event_type_event = new(string)
				*e.event_type_event = value.String
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Event.
// This includes values selected through modifiers, order, etc.
func (e *Event) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryUserStatsID queries the "user_stats_id" edge of the Event entity.
func (e *Event) QueryUserStatsID() *UserStatsQuery {
	return NewEventClient(e.config).QueryUserStatsID(e)
}

// QueryEventType queries the "event_type" edge of the Event entity.
func (e *Event) QueryEventType() *EventTypeQuery {
	return NewEventClient(e.config).QueryEventType(e)
}

// Update returns a builder for updating this Event.
// Note that you need to call Event.Unwrap() before calling this method if this Event
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Event) Update() *EventUpdateOne {
	return NewEventClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Event entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Event) Unwrap() *Event {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Event is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Event) String() string {
	var builder strings.Builder
	builder.WriteString("Event(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("name=")
	builder.WriteString(e.Name)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(e.Address)
	builder.WriteString(", ")
	builder.WriteString("event_code=")
	builder.WriteString(fmt.Sprintf("%v", e.EventCode))
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(e.Date)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(e.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_public=")
	builder.WriteString(fmt.Sprintf("%v", e.IsPublic))
	builder.WriteString(", ")
	builder.WriteString("is_finished=")
	builder.WriteString(fmt.Sprintf("%v", e.IsFinished))
	builder.WriteByte(')')
	return builder.String()
}

// Events is a parsable slice of Event.
type Events []*Event
