// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/asma12a/challenge-s6/ent/event"
	"github.com/asma12a/challenge-s6/ent/sport"
)

// SportCreate is the builder for creating a Sport entity.
type SportCreate struct {
	config
	mutation *SportMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (sc *SportCreate) SetName(s string) *SportCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetImageURL sets the "image_url" field.
func (sc *SportCreate) SetImageURL(s string) *SportCreate {
	sc.mutation.SetImageURL(s)
	return sc
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (sc *SportCreate) SetNillableImageURL(s *string) *SportCreate {
	if s != nil {
		sc.SetImageURL(*s)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SportCreate) SetID(s string) *SportCreate {
	sc.mutation.SetID(s)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *SportCreate) SetNillableID(s *string) *SportCreate {
	if s != nil {
		sc.SetID(*s)
	}
	return sc
}

// AddEventIDs adds the "event" edge to the Event entity by IDs.
func (sc *SportCreate) AddEventIDs(ids ...string) *SportCreate {
	sc.mutation.AddEventIDs(ids...)
	return sc
}

// AddEvent adds the "event" edges to the Event entity.
func (sc *SportCreate) AddEvent(e ...*Event) *SportCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return sc.AddEventIDs(ids...)
}

// Mutation returns the SportMutation object of the builder.
func (sc *SportCreate) Mutation() *SportMutation {
	return sc.mutation
}

// Save creates the Sport in the database.
func (sc *SportCreate) Save(ctx context.Context) (*Sport, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SportCreate) SaveX(ctx context.Context) *Sport {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SportCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SportCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SportCreate) defaults() {
	if _, ok := sc.mutation.ID(); !ok {
		v := sport.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SportCreate) check() error {
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Sport.name"`)}
	}
	if v, ok := sc.mutation.Name(); ok {
		if err := sport.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Sport.name": %w`, err)}
		}
	}
	if v, ok := sc.mutation.ID(); ok {
		if err := sport.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Sport.id": %w`, err)}
		}
	}
	return nil
}

func (sc *SportCreate) sqlSave(ctx context.Context) (*Sport, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Sport.ID type: %T", _spec.ID.Value)
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SportCreate) createSpec() (*Sport, *sqlgraph.CreateSpec) {
	var (
		_node = &Sport{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(sport.Table, sqlgraph.NewFieldSpec(sport.FieldID, field.TypeString))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(sport.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.ImageURL(); ok {
		_spec.SetField(sport.FieldImageURL, field.TypeString, value)
		_node.ImageURL = value
	}
	if nodes := sc.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sport.EventTable,
			Columns: []string{sport.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SportCreateBulk is the builder for creating many Sport entities in bulk.
type SportCreateBulk struct {
	config
	err      error
	builders []*SportCreate
}

// Save creates the Sport entities in the database.
func (scb *SportCreateBulk) Save(ctx context.Context) ([]*Sport, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Sport, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SportMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SportCreateBulk) SaveX(ctx context.Context) []*Sport {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SportCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SportCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
