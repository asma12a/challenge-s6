// Code generated by ent, DO NOT EDIT.

package runningevent

import (
	"entgo.io/ent/dialect/sql"
	"github.com/asma12a/challenge-s6/ent/predicate"
	"github.com/asma12a/challenge-s6/ent/schema/ulid"
)

// ID filters vertices based on their ID field.
func ID(id ulid.ID) predicate.RunningEvent {
	return predicate.RunningEvent(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id ulid.ID) predicate.RunningEvent {
	return predicate.RunningEvent(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id ulid.ID) predicate.RunningEvent {
	return predicate.RunningEvent(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...ulid.ID) predicate.RunningEvent {
	return predicate.RunningEvent(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...ulid.ID) predicate.RunningEvent {
	return predicate.RunningEvent(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id ulid.ID) predicate.RunningEvent {
	return predicate.RunningEvent(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id ulid.ID) predicate.RunningEvent {
	return predicate.RunningEvent(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id ulid.ID) predicate.RunningEvent {
	return predicate.RunningEvent(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id ulid.ID) predicate.RunningEvent {
	return predicate.RunningEvent(sql.FieldLTE(FieldID, id))
}

// EventRunningID applies equality check predicate on the "event_running_id" field. It's identical to EventRunningIDEQ.
func EventRunningID(v string) predicate.RunningEvent {
	return predicate.RunningEvent(sql.FieldEQ(FieldEventRunningID, v))
}

// TeamID applies equality check predicate on the "team_id" field. It's identical to TeamIDEQ.
func TeamID(v string) predicate.RunningEvent {
	return predicate.RunningEvent(sql.FieldEQ(FieldTeamID, v))
}

// EventRunningIDEQ applies the EQ predicate on the "event_running_id" field.
func EventRunningIDEQ(v string) predicate.RunningEvent {
	return predicate.RunningEvent(sql.FieldEQ(FieldEventRunningID, v))
}

// EventRunningIDNEQ applies the NEQ predicate on the "event_running_id" field.
func EventRunningIDNEQ(v string) predicate.RunningEvent {
	return predicate.RunningEvent(sql.FieldNEQ(FieldEventRunningID, v))
}

// EventRunningIDIn applies the In predicate on the "event_running_id" field.
func EventRunningIDIn(vs ...string) predicate.RunningEvent {
	return predicate.RunningEvent(sql.FieldIn(FieldEventRunningID, vs...))
}

// EventRunningIDNotIn applies the NotIn predicate on the "event_running_id" field.
func EventRunningIDNotIn(vs ...string) predicate.RunningEvent {
	return predicate.RunningEvent(sql.FieldNotIn(FieldEventRunningID, vs...))
}

// EventRunningIDGT applies the GT predicate on the "event_running_id" field.
func EventRunningIDGT(v string) predicate.RunningEvent {
	return predicate.RunningEvent(sql.FieldGT(FieldEventRunningID, v))
}

// EventRunningIDGTE applies the GTE predicate on the "event_running_id" field.
func EventRunningIDGTE(v string) predicate.RunningEvent {
	return predicate.RunningEvent(sql.FieldGTE(FieldEventRunningID, v))
}

// EventRunningIDLT applies the LT predicate on the "event_running_id" field.
func EventRunningIDLT(v string) predicate.RunningEvent {
	return predicate.RunningEvent(sql.FieldLT(FieldEventRunningID, v))
}

// EventRunningIDLTE applies the LTE predicate on the "event_running_id" field.
func EventRunningIDLTE(v string) predicate.RunningEvent {
	return predicate.RunningEvent(sql.FieldLTE(FieldEventRunningID, v))
}

// EventRunningIDContains applies the Contains predicate on the "event_running_id" field.
func EventRunningIDContains(v string) predicate.RunningEvent {
	return predicate.RunningEvent(sql.FieldContains(FieldEventRunningID, v))
}

// EventRunningIDHasPrefix applies the HasPrefix predicate on the "event_running_id" field.
func EventRunningIDHasPrefix(v string) predicate.RunningEvent {
	return predicate.RunningEvent(sql.FieldHasPrefix(FieldEventRunningID, v))
}

// EventRunningIDHasSuffix applies the HasSuffix predicate on the "event_running_id" field.
func EventRunningIDHasSuffix(v string) predicate.RunningEvent {
	return predicate.RunningEvent(sql.FieldHasSuffix(FieldEventRunningID, v))
}

// EventRunningIDEqualFold applies the EqualFold predicate on the "event_running_id" field.
func EventRunningIDEqualFold(v string) predicate.RunningEvent {
	return predicate.RunningEvent(sql.FieldEqualFold(FieldEventRunningID, v))
}

// EventRunningIDContainsFold applies the ContainsFold predicate on the "event_running_id" field.
func EventRunningIDContainsFold(v string) predicate.RunningEvent {
	return predicate.RunningEvent(sql.FieldContainsFold(FieldEventRunningID, v))
}

// TeamIDEQ applies the EQ predicate on the "team_id" field.
func TeamIDEQ(v string) predicate.RunningEvent {
	return predicate.RunningEvent(sql.FieldEQ(FieldTeamID, v))
}

// TeamIDNEQ applies the NEQ predicate on the "team_id" field.
func TeamIDNEQ(v string) predicate.RunningEvent {
	return predicate.RunningEvent(sql.FieldNEQ(FieldTeamID, v))
}

// TeamIDIn applies the In predicate on the "team_id" field.
func TeamIDIn(vs ...string) predicate.RunningEvent {
	return predicate.RunningEvent(sql.FieldIn(FieldTeamID, vs...))
}

// TeamIDNotIn applies the NotIn predicate on the "team_id" field.
func TeamIDNotIn(vs ...string) predicate.RunningEvent {
	return predicate.RunningEvent(sql.FieldNotIn(FieldTeamID, vs...))
}

// TeamIDGT applies the GT predicate on the "team_id" field.
func TeamIDGT(v string) predicate.RunningEvent {
	return predicate.RunningEvent(sql.FieldGT(FieldTeamID, v))
}

// TeamIDGTE applies the GTE predicate on the "team_id" field.
func TeamIDGTE(v string) predicate.RunningEvent {
	return predicate.RunningEvent(sql.FieldGTE(FieldTeamID, v))
}

// TeamIDLT applies the LT predicate on the "team_id" field.
func TeamIDLT(v string) predicate.RunningEvent {
	return predicate.RunningEvent(sql.FieldLT(FieldTeamID, v))
}

// TeamIDLTE applies the LTE predicate on the "team_id" field.
func TeamIDLTE(v string) predicate.RunningEvent {
	return predicate.RunningEvent(sql.FieldLTE(FieldTeamID, v))
}

// TeamIDContains applies the Contains predicate on the "team_id" field.
func TeamIDContains(v string) predicate.RunningEvent {
	return predicate.RunningEvent(sql.FieldContains(FieldTeamID, v))
}

// TeamIDHasPrefix applies the HasPrefix predicate on the "team_id" field.
func TeamIDHasPrefix(v string) predicate.RunningEvent {
	return predicate.RunningEvent(sql.FieldHasPrefix(FieldTeamID, v))
}

// TeamIDHasSuffix applies the HasSuffix predicate on the "team_id" field.
func TeamIDHasSuffix(v string) predicate.RunningEvent {
	return predicate.RunningEvent(sql.FieldHasSuffix(FieldTeamID, v))
}

// TeamIDEqualFold applies the EqualFold predicate on the "team_id" field.
func TeamIDEqualFold(v string) predicate.RunningEvent {
	return predicate.RunningEvent(sql.FieldEqualFold(FieldTeamID, v))
}

// TeamIDContainsFold applies the ContainsFold predicate on the "team_id" field.
func TeamIDContainsFold(v string) predicate.RunningEvent {
	return predicate.RunningEvent(sql.FieldContainsFold(FieldTeamID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RunningEvent) predicate.RunningEvent {
	return predicate.RunningEvent(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RunningEvent) predicate.RunningEvent {
	return predicate.RunningEvent(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RunningEvent) predicate.RunningEvent {
	return predicate.RunningEvent(sql.NotPredicates(p))
}
