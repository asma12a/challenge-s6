// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/asma12a/challenge-s6/ent/userstats"
	"github.com/google/uuid"
	ulid "github.com/oklog/ulid/v2"
)

// UserStatsCreate is the builder for creating a UserStats entity.
type UserStatsCreate struct {
	config
	mutation *UserStatsMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (usc *UserStatsCreate) SetUserID(s string) *UserStatsCreate {
	usc.mutation.SetUserID(s)
	return usc
}

// SetEventID sets the "event_id" field.
func (usc *UserStatsCreate) SetEventID(u uuid.UUID) *UserStatsCreate {
	usc.mutation.SetEventID(u)
	return usc
}

// SetID sets the "id" field.
func (usc *UserStatsCreate) SetID(u ulid.ULID) *UserStatsCreate {
	usc.mutation.SetID(u)
	return usc
}

// Mutation returns the UserStatsMutation object of the builder.
func (usc *UserStatsCreate) Mutation() *UserStatsMutation {
	return usc.mutation
}

// Save creates the UserStats in the database.
func (usc *UserStatsCreate) Save(ctx context.Context) (*UserStats, error) {
	return withHooks(ctx, usc.sqlSave, usc.mutation, usc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (usc *UserStatsCreate) SaveX(ctx context.Context) *UserStats {
	v, err := usc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (usc *UserStatsCreate) Exec(ctx context.Context) error {
	_, err := usc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usc *UserStatsCreate) ExecX(ctx context.Context) {
	if err := usc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (usc *UserStatsCreate) check() error {
	if _, ok := usc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserStats.user_id"`)}
	}
	if _, ok := usc.mutation.EventID(); !ok {
		return &ValidationError{Name: "event_id", err: errors.New(`ent: missing required field "UserStats.event_id"`)}
	}
	return nil
}

func (usc *UserStatsCreate) sqlSave(ctx context.Context) (*UserStats, error) {
	if err := usc.check(); err != nil {
		return nil, err
	}
	_node, _spec := usc.createSpec()
	if err := sqlgraph.CreateNode(ctx, usc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*ulid.ULID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	usc.mutation.id = &_node.ID
	usc.mutation.done = true
	return _node, nil
}

func (usc *UserStatsCreate) createSpec() (*UserStats, *sqlgraph.CreateSpec) {
	var (
		_node = &UserStats{config: usc.config}
		_spec = sqlgraph.NewCreateSpec(userstats.Table, sqlgraph.NewFieldSpec(userstats.FieldID, field.TypeUUID))
	)
	if id, ok := usc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := usc.mutation.UserID(); ok {
		_spec.SetField(userstats.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := usc.mutation.EventID(); ok {
		_spec.SetField(userstats.FieldEventID, field.TypeUUID, value)
		_node.EventID = value
	}
	return _node, _spec
}

// UserStatsCreateBulk is the builder for creating many UserStats entities in bulk.
type UserStatsCreateBulk struct {
	config
	err      error
	builders []*UserStatsCreate
}

// Save creates the UserStats entities in the database.
func (uscb *UserStatsCreateBulk) Save(ctx context.Context) ([]*UserStats, error) {
	if uscb.err != nil {
		return nil, uscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uscb.builders))
	nodes := make([]*UserStats, len(uscb.builders))
	mutators := make([]Mutator, len(uscb.builders))
	for i := range uscb.builders {
		func(i int, root context.Context) {
			builder := uscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserStatsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uscb *UserStatsCreateBulk) SaveX(ctx context.Context) []*UserStats {
	v, err := uscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uscb *UserStatsCreateBulk) Exec(ctx context.Context) error {
	_, err := uscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uscb *UserStatsCreateBulk) ExecX(ctx context.Context) {
	if err := uscb.Exec(ctx); err != nil {
		panic(err)
	}
}
