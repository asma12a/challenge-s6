// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/asma12a/challenge-s6/ent/basketevent"
	"github.com/asma12a/challenge-s6/ent/predicate"
)

// BasketEventUpdate is the builder for updating BasketEvent entities.
type BasketEventUpdate struct {
	config
	hooks    []Hook
	mutation *BasketEventMutation
}

// Where appends a list predicates to the BasketEventUpdate builder.
func (beu *BasketEventUpdate) Where(ps ...predicate.BasketEvent) *BasketEventUpdate {
	beu.mutation.Where(ps...)
	return beu
}

// SetEventBasketID sets the "event_basket_id" field.
func (beu *BasketEventUpdate) SetEventBasketID(s string) *BasketEventUpdate {
	beu.mutation.SetEventBasketID(s)
	return beu
}

// SetNillableEventBasketID sets the "event_basket_id" field if the given value is not nil.
func (beu *BasketEventUpdate) SetNillableEventBasketID(s *string) *BasketEventUpdate {
	if s != nil {
		beu.SetEventBasketID(*s)
	}
	return beu
}

// SetTeamA sets the "team_A" field.
func (beu *BasketEventUpdate) SetTeamA(s string) *BasketEventUpdate {
	beu.mutation.SetTeamA(s)
	return beu
}

// SetNillableTeamA sets the "team_A" field if the given value is not nil.
func (beu *BasketEventUpdate) SetNillableTeamA(s *string) *BasketEventUpdate {
	if s != nil {
		beu.SetTeamA(*s)
	}
	return beu
}

// SetTeamB sets the "team_B" field.
func (beu *BasketEventUpdate) SetTeamB(s string) *BasketEventUpdate {
	beu.mutation.SetTeamB(s)
	return beu
}

// SetNillableTeamB sets the "team_B" field if the given value is not nil.
func (beu *BasketEventUpdate) SetNillableTeamB(s *string) *BasketEventUpdate {
	if s != nil {
		beu.SetTeamB(*s)
	}
	return beu
}

// Mutation returns the BasketEventMutation object of the builder.
func (beu *BasketEventUpdate) Mutation() *BasketEventMutation {
	return beu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (beu *BasketEventUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, beu.sqlSave, beu.mutation, beu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (beu *BasketEventUpdate) SaveX(ctx context.Context) int {
	affected, err := beu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (beu *BasketEventUpdate) Exec(ctx context.Context) error {
	_, err := beu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (beu *BasketEventUpdate) ExecX(ctx context.Context) {
	if err := beu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (beu *BasketEventUpdate) check() error {
	if v, ok := beu.mutation.EventBasketID(); ok {
		if err := basketevent.EventBasketIDValidator(v); err != nil {
			return &ValidationError{Name: "event_basket_id", err: fmt.Errorf(`ent: validator failed for field "BasketEvent.event_basket_id": %w`, err)}
		}
	}
	if v, ok := beu.mutation.TeamA(); ok {
		if err := basketevent.TeamAValidator(v); err != nil {
			return &ValidationError{Name: "team_A", err: fmt.Errorf(`ent: validator failed for field "BasketEvent.team_A": %w`, err)}
		}
	}
	if v, ok := beu.mutation.TeamB(); ok {
		if err := basketevent.TeamBValidator(v); err != nil {
			return &ValidationError{Name: "team_B", err: fmt.Errorf(`ent: validator failed for field "BasketEvent.team_B": %w`, err)}
		}
	}
	return nil
}

func (beu *BasketEventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := beu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(basketevent.Table, basketevent.Columns, sqlgraph.NewFieldSpec(basketevent.FieldID, field.TypeString))
	if ps := beu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := beu.mutation.EventBasketID(); ok {
		_spec.SetField(basketevent.FieldEventBasketID, field.TypeString, value)
	}
	if value, ok := beu.mutation.TeamA(); ok {
		_spec.SetField(basketevent.FieldTeamA, field.TypeString, value)
	}
	if value, ok := beu.mutation.TeamB(); ok {
		_spec.SetField(basketevent.FieldTeamB, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, beu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{basketevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	beu.mutation.done = true
	return n, nil
}

// BasketEventUpdateOne is the builder for updating a single BasketEvent entity.
type BasketEventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BasketEventMutation
}

// SetEventBasketID sets the "event_basket_id" field.
func (beuo *BasketEventUpdateOne) SetEventBasketID(s string) *BasketEventUpdateOne {
	beuo.mutation.SetEventBasketID(s)
	return beuo
}

// SetNillableEventBasketID sets the "event_basket_id" field if the given value is not nil.
func (beuo *BasketEventUpdateOne) SetNillableEventBasketID(s *string) *BasketEventUpdateOne {
	if s != nil {
		beuo.SetEventBasketID(*s)
	}
	return beuo
}

// SetTeamA sets the "team_A" field.
func (beuo *BasketEventUpdateOne) SetTeamA(s string) *BasketEventUpdateOne {
	beuo.mutation.SetTeamA(s)
	return beuo
}

// SetNillableTeamA sets the "team_A" field if the given value is not nil.
func (beuo *BasketEventUpdateOne) SetNillableTeamA(s *string) *BasketEventUpdateOne {
	if s != nil {
		beuo.SetTeamA(*s)
	}
	return beuo
}

// SetTeamB sets the "team_B" field.
func (beuo *BasketEventUpdateOne) SetTeamB(s string) *BasketEventUpdateOne {
	beuo.mutation.SetTeamB(s)
	return beuo
}

// SetNillableTeamB sets the "team_B" field if the given value is not nil.
func (beuo *BasketEventUpdateOne) SetNillableTeamB(s *string) *BasketEventUpdateOne {
	if s != nil {
		beuo.SetTeamB(*s)
	}
	return beuo
}

// Mutation returns the BasketEventMutation object of the builder.
func (beuo *BasketEventUpdateOne) Mutation() *BasketEventMutation {
	return beuo.mutation
}

// Where appends a list predicates to the BasketEventUpdate builder.
func (beuo *BasketEventUpdateOne) Where(ps ...predicate.BasketEvent) *BasketEventUpdateOne {
	beuo.mutation.Where(ps...)
	return beuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (beuo *BasketEventUpdateOne) Select(field string, fields ...string) *BasketEventUpdateOne {
	beuo.fields = append([]string{field}, fields...)
	return beuo
}

// Save executes the query and returns the updated BasketEvent entity.
func (beuo *BasketEventUpdateOne) Save(ctx context.Context) (*BasketEvent, error) {
	return withHooks(ctx, beuo.sqlSave, beuo.mutation, beuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (beuo *BasketEventUpdateOne) SaveX(ctx context.Context) *BasketEvent {
	node, err := beuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (beuo *BasketEventUpdateOne) Exec(ctx context.Context) error {
	_, err := beuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (beuo *BasketEventUpdateOne) ExecX(ctx context.Context) {
	if err := beuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (beuo *BasketEventUpdateOne) check() error {
	if v, ok := beuo.mutation.EventBasketID(); ok {
		if err := basketevent.EventBasketIDValidator(v); err != nil {
			return &ValidationError{Name: "event_basket_id", err: fmt.Errorf(`ent: validator failed for field "BasketEvent.event_basket_id": %w`, err)}
		}
	}
	if v, ok := beuo.mutation.TeamA(); ok {
		if err := basketevent.TeamAValidator(v); err != nil {
			return &ValidationError{Name: "team_A", err: fmt.Errorf(`ent: validator failed for field "BasketEvent.team_A": %w`, err)}
		}
	}
	if v, ok := beuo.mutation.TeamB(); ok {
		if err := basketevent.TeamBValidator(v); err != nil {
			return &ValidationError{Name: "team_B", err: fmt.Errorf(`ent: validator failed for field "BasketEvent.team_B": %w`, err)}
		}
	}
	return nil
}

func (beuo *BasketEventUpdateOne) sqlSave(ctx context.Context) (_node *BasketEvent, err error) {
	if err := beuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(basketevent.Table, basketevent.Columns, sqlgraph.NewFieldSpec(basketevent.FieldID, field.TypeString))
	id, ok := beuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BasketEvent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := beuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, basketevent.FieldID)
		for _, f := range fields {
			if !basketevent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != basketevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := beuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := beuo.mutation.EventBasketID(); ok {
		_spec.SetField(basketevent.FieldEventBasketID, field.TypeString, value)
	}
	if value, ok := beuo.mutation.TeamA(); ok {
		_spec.SetField(basketevent.FieldTeamA, field.TypeString, value)
	}
	if value, ok := beuo.mutation.TeamB(); ok {
		_spec.SetField(basketevent.FieldTeamB, field.TypeString, value)
	}
	_node = &BasketEvent{config: beuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, beuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{basketevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	beuo.mutation.done = true
	return _node, nil
}
