{
    "swagger": "2.0",
    "info": {
        "description": "API pour gérer des groupes de personnes autour d'une thématique",
        "title": "Challenge S6 API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Support Technique",
            "url": "http://www.example.com/support",
            "email": "support@example.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0"
    },
    "host": "localhost:3001",
    "basePath": "/api",
    "paths": {
        "/events/search": {
            "get": {
                "description": "Search for events based on criteria such as name, address, type, and sport ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Search Events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search term",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Event type",
                        "name": "eventType",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sport ID",
                        "name": "sportID",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of events matching search",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Event"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request\"  // Remplacer fiber.Map par map[string]interface{}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/events/{id}": {
            "get": {
                "description": "Get an event by its ID with details of teams and players",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get an Event by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event details",
                        "schema": {
                            "$ref": "#/definitions/entity.Event"
                        }
                    },
                    "400": {
                        "description": "Bad Request\"  // Remplacer fiber.Map par map[string]interface{}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Event Not Found\"  // Remplacer fiber.Map par map[string]interface{}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing event by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Update an Event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated event data",
                        "name": "event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Event"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated event",
                        "schema": {
                            "$ref": "#/definitions/entity.Event"
                        }
                    },
                    "400": {
                        "description": "Bad Request\"  // Remplacer fiber.Map par map[string]interface{}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Event Not Found\"  // Remplacer fiber.Map par map[string]interface{}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an event by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Delete an Event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event deleted\"  // Remplacer fiber.Map par map[string]interface{}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Event Not Found\"  // Remplacer fiber.Map par map[string]interface{}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/messages": {
            "get": {
                "description": "Get a list of all messages",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Get all messages",
                "responses": {
                    "200": {
                        "description": "List of messages",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Message"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new message for a specific event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Create a new message",
                "parameters": [
                    {
                        "description": "Message to be created",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Message"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Message created",
                        "schema": {
                            "$ref": "#/definitions/entity.Message"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/messages/event/{eventID}": {
            "get": {
                "description": "Get all messages associated with a specific event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Get all messages for an event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "eventID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of messages",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Message"
                            }
                        }
                    },
                    "404": {
                        "description": "Event Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/messages/{id}": {
            "get": {
                "description": "Get a specific message by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Get a message by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Message ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message details",
                        "schema": {
                            "$ref": "#/definitions/entity.Message"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Message Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing message by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Update a message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Message ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated message data",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Message"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated message",
                        "schema": {
                            "$ref": "#/definitions/entity.Message"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Message Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a message by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Delete a message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Message ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Message Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/sports": {
            "get": {
                "description": "Get a list of all sports",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sports"
                ],
                "summary": "List all sports",
                "responses": {
                    "200": {
                        "description": "List of sports",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Sport"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new sport with name and image URL",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sports"
                ],
                "summary": "Create a new sport",
                "parameters": [
                    {
                        "description": "Sport to be created",
                        "name": "sport",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Sport"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Sport created",
                        "schema": {
                            "$ref": "#/definitions/entity.Sport"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/sports/{id}": {
            "get": {
                "description": "Get a specific sport by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sports"
                ],
                "summary": "Get a sport by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Sport ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sport details",
                        "schema": {
                            "$ref": "#/definitions/entity.Sport"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Sport Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Update a sport's details by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sports"
                ],
                "summary": "Update a sport",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Sport ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated sport data",
                        "name": "sport",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Sport"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated sport",
                        "schema": {
                            "$ref": "#/definitions/entity.Sport"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Sport Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a sport by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sports"
                ],
                "summary": "Delete a sport",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Sport ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sport deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Sport Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/team_users": {
            "get": {
                "description": "Get a list of all team-user relations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "team_users"
                ],
                "summary": "List all TeamUser relations",
                "responses": {
                    "200": {
                        "description": "List of TeamUser relations",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.TeamUser"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new team-user relation with userID and teamID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "team_users"
                ],
                "summary": "Create a new TeamUser",
                "parameters": [
                    {
                        "description": "Team-User relation to be created",
                        "name": "teamUser",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.TeamUser"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "TeamUser created",
                        "schema": {
                            "$ref": "#/definitions/entity.TeamUser"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/team_users/{id}": {
            "put": {
                "description": "Update a specific team-user relation by userID and teamID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "team_users"
                ],
                "summary": "Update a TeamUser relation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "TeamUser ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated Team-User relation",
                        "name": "teamUser",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.TeamUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated TeamUser",
                        "schema": {
                            "$ref": "#/definitions/entity.TeamUser"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "TeamUser Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a team-user relation by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "team_users"
                ],
                "summary": "Delete a TeamUser relation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "TeamUser ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "TeamUser deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "TeamUser Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/team_users/{userID}/{teamID}": {
            "get": {
                "description": "Get a specific team-user relation by userID and teamID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "team_users"
                ],
                "summary": "Get a TeamUser by userID and teamID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Team ID",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "TeamUser details",
                        "schema": {
                            "$ref": "#/definitions/entity.TeamUser"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "TeamUser Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/teams": {
            "post": {
                "description": "Create a new team with name and max players",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teams"
                ],
                "summary": "Create a new team",
                "parameters": [
                    {
                        "description": "Team to be created",
                        "name": "team",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Team"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Team created",
                        "schema": {
                            "$ref": "#/definitions/entity.Team"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/teams/{id}": {
            "get": {
                "description": "Get a specific team by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teams"
                ],
                "summary": "Get a team by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team details",
                        "schema": {
                            "$ref": "#/definitions/entity.Team"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Team Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Update a team's details by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teams"
                ],
                "summary": "Update a team",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated team data",
                        "name": "team",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Team"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated team",
                        "schema": {
                            "$ref": "#/definitions/entity.Team"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Team Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a team by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teams"
                ],
                "summary": "Delete a team",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Team Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/user_stats": {
            "post": {
                "description": "Create a new UserStats entry with userID and eventID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user_stats"
                ],
                "summary": "Create a new UserStats",
                "parameters": [
                    {
                        "description": "UserStats to be created",
                        "name": "userStats",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.UserStats"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "UserStats created",
                        "schema": {
                            "$ref": "#/definitions/entity.UserStats"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Get a list of all users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "List all users",
                "responses": {
                    "200": {
                        "description": "List of users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.User"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new user with name, email, and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User to be created",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.User"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created",
                        "schema": {
                            "$ref": "#/definitions/entity.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "Email already registered",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Get a specific user by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get a user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details",
                        "schema": {
                            "$ref": "#/definitions/entity.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "User Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Update a user's details by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated user data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated user",
                        "schema": {
                            "$ref": "#/definitions/entity.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "User Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a user by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "User Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "ent.Event": {
            "type": "object",
            "required": [
                "address",
                "date",
                "name"
            ],
            "properties": {
                "address": {
                    "description": "Address holds the value of the \"address\" field.",
                    "type": "string"
                },
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "created_by": {
                    "description": "CreatedBy holds the value of the \"created_by\" field.",
                    "type": "string"
                },
                "date": {
                    "description": "Date holds the value of the \"date\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the EventQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.EventEdges"
                        }
                    ]
                },
                "event_code": {
                    "description": "EventCode holds the value of the \"event_code\" field.",
                    "type": "string"
                },
                "event_type": {
                    "description": "EventType holds the value of the \"event_type\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/event.EventType"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "is_finished": {
                    "description": "IsFinished holds the value of the \"is_finished\" field.",
                    "type": "boolean"
                },
                "is_public": {
                    "description": "IsPublic holds the value of the \"is_public\" field.",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "updated_by": {
                    "description": "UpdatedBy holds the value of the \"updated_by\" field.",
                    "type": "string"
                }
            }
        },
        "ent.EventEdges": {
            "type": "object",
            "properties": {
                "event_teams": {
                    "description": "EventTeams holds the value of the event_teams edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.EventTeams"
                    }
                },
                "messages": {
                    "description": "Messages holds the value of the messages edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Message"
                    }
                },
                "sport": {
                    "description": "Sport holds the value of the sport edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.Sport"
                        }
                    ]
                },
                "user_stats": {
                    "description": "UserStats holds the value of the user_stats edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.UserStats"
                    }
                }
            }
        },
        "ent.EventTeams": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "created_by": {
                    "description": "CreatedBy holds the value of the \"created_by\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the EventTeamsQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.EventTeamsEdges"
                        }
                    ]
                },
                "event_id": {
                    "description": "EventID holds the value of the \"event_id\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "team_id": {
                    "description": "TeamID holds the value of the \"team_id\" field.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "updated_by": {
                    "description": "UpdatedBy holds the value of the \"updated_by\" field.",
                    "type": "string"
                }
            }
        },
        "ent.EventTeamsEdges": {
            "type": "object",
            "properties": {
                "event": {
                    "description": "Event holds the value of the event edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.Event"
                        }
                    ]
                },
                "team": {
                    "description": "Team holds the value of the team edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.Team"
                        }
                    ]
                }
            }
        },
        "ent.Message": {
            "type": "object",
            "properties": {
                "content": {
                    "description": "Content holds the value of the \"content\" field.",
                    "type": "string"
                },
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "created_by": {
                    "description": "CreatedBy holds the value of the \"created_by\" field.",
                    "type": "string"
                },
                "event_id": {
                    "description": "EventID holds the value of the \"event_id\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "updated_by": {
                    "description": "UpdatedBy holds the value of the \"updated_by\" field.",
                    "type": "string"
                },
                "user_id": {
                    "description": "UserID holds the value of the \"user_id\" field.",
                    "type": "string"
                },
                "user_name": {
                    "description": "UserName holds the value of the \"user_name\" field.",
                    "type": "string"
                }
            }
        },
        "ent.Sport": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "color": {
                    "description": "Color holds the value of the \"color\" field.",
                    "type": "string"
                },
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "created_by": {
                    "description": "CreatedBy holds the value of the \"created_by\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the SportQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.SportEdges"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "image_url": {
                    "description": "ImageURL holds the value of the \"image_url\" field.",
                    "type": "string"
                },
                "max_teams": {
                    "description": "MaxTeams holds the value of the \"max_teams\" field.",
                    "type": "integer"
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.",
                    "type": "string"
                },
                "type": {
                    "description": "Type holds the value of the \"type\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/sport.Type"
                        }
                    ]
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "updated_by": {
                    "description": "UpdatedBy holds the value of the \"updated_by\" field.",
                    "type": "string"
                }
            }
        },
        "ent.SportEdges": {
            "type": "object",
            "properties": {
                "events": {
                    "description": "Events holds the value of the events edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Event"
                    }
                },
                "sport_stat_labels": {
                    "description": "SportStatLabels holds the value of the sport_stat_labels edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.SportStatLabels"
                    }
                }
            }
        },
        "ent.SportStatLabels": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "created_by": {
                    "description": "CreatedBy holds the value of the \"created_by\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the SportStatLabelsQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.SportStatLabelsEdges"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "is_main": {
                    "description": "IsMain holds the value of the \"is_main\" field.",
                    "type": "boolean"
                },
                "label": {
                    "description": "Label holds the value of the \"label\" field.",
                    "type": "string"
                },
                "sport_id": {
                    "description": "SportID holds the value of the \"sport_id\" field.",
                    "type": "string"
                },
                "unit": {
                    "description": "Unit holds the value of the \"unit\" field.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "updated_by": {
                    "description": "UpdatedBy holds the value of the \"updated_by\" field.",
                    "type": "string"
                }
            }
        },
        "ent.SportStatLabelsEdges": {
            "type": "object",
            "properties": {
                "user_stats": {
                    "description": "UserStats holds the value of the user_stats edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.UserStats"
                    }
                }
            }
        },
        "ent.Team": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "created_by": {
                    "description": "CreatedBy holds the value of the \"created_by\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the TeamQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.TeamEdges"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "max_players": {
                    "description": "MaxPlayers holds the value of the \"max_players\" field.",
                    "type": "integer"
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "updated_by": {
                    "description": "UpdatedBy holds the value of the \"updated_by\" field.",
                    "type": "string"
                }
            }
        },
        "ent.TeamEdges": {
            "type": "object",
            "properties": {
                "event_teams": {
                    "description": "EventTeams holds the value of the event_teams edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.EventTeams"
                    }
                },
                "team_users": {
                    "description": "TeamUsers holds the value of the team_users edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.TeamUser"
                    }
                }
            }
        },
        "ent.TeamUser": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "created_by": {
                    "description": "CreatedBy holds the value of the \"created_by\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the TeamUserQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.TeamUserEdges"
                        }
                    ]
                },
                "email": {
                    "description": "Email holds the value of the \"email\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "role": {
                    "description": "Role holds the value of the \"role\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/teamuser.Role"
                        }
                    ]
                },
                "status": {
                    "description": "Status holds the value of the \"status\" field.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "updated_by": {
                    "description": "UpdatedBy holds the value of the \"updated_by\" field.",
                    "type": "string"
                }
            }
        },
        "ent.TeamUserEdges": {
            "type": "object",
            "properties": {
                "team": {
                    "description": "Team holds the value of the team edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.Team"
                        }
                    ]
                },
                "user": {
                    "description": "User holds the value of the user edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.User"
                        }
                    ]
                }
            }
        },
        "ent.User": {
            "type": "object",
            "required": [
                "email",
                "name"
            ],
            "properties": {
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "created_by": {
                    "description": "CreatedBy holds the value of the \"created_by\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the UserQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.UserEdges"
                        }
                    ]
                },
                "email": {
                    "description": "Email holds the value of the \"email\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.",
                    "type": "string"
                },
                "password": {
                    "description": "Password holds the value of the \"password\" field.",
                    "type": "string"
                },
                "roles": {
                    "description": "Roles holds the value of the \"roles\" field.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "updated_by": {
                    "description": "UpdatedBy holds the value of the \"updated_by\" field.",
                    "type": "string"
                }
            }
        },
        "ent.UserEdges": {
            "type": "object",
            "properties": {
                "team_users": {
                    "description": "TeamUsers holds the value of the team_users edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.TeamUser"
                    }
                },
                "user_message_id": {
                    "description": "UserMessageID holds the value of the user_message_id edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Message"
                    }
                },
                "user_stats": {
                    "description": "UserStats holds the value of the user_stats edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.UserStats"
                    }
                }
            }
        },
        "ent.UserStats": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "created_by": {
                    "description": "CreatedBy holds the value of the \"created_by\" field.",
                    "type": "string"
                },
                "event_id": {
                    "description": "EventID holds the value of the \"event_id\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "stat_id": {
                    "description": "StatID holds the value of the \"stat_id\" field.",
                    "type": "string"
                },
                "stat_value": {
                    "description": "StatValue holds the value of the \"stat_value\" field.",
                    "type": "integer"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "updated_by": {
                    "description": "UpdatedBy holds the value of the \"updated_by\" field.",
                    "type": "string"
                },
                "user_id": {
                    "description": "UserID holds the value of the \"user_id\" field.",
                    "type": "string"
                }
            }
        },
        "entity.Event": {
            "type": "object",
            "required": [
                "address",
                "date",
                "name"
            ],
            "properties": {
                "address": {
                    "description": "Address holds the value of the \"address\" field.",
                    "type": "string"
                },
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "created_by": {
                    "description": "CreatedBy holds the value of the \"created_by\" field.",
                    "type": "string"
                },
                "date": {
                    "description": "Date holds the value of the \"date\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the EventQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.EventEdges"
                        }
                    ]
                },
                "event_code": {
                    "description": "EventCode holds the value of the \"event_code\" field.",
                    "type": "string"
                },
                "event_type": {
                    "description": "EventType holds the value of the \"event_type\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/event.EventType"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "is_finished": {
                    "description": "IsFinished holds the value of the \"is_finished\" field.",
                    "type": "boolean"
                },
                "is_public": {
                    "description": "IsPublic holds the value of the \"is_public\" field.",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.",
                    "type": "string"
                },
                "sport_id": {
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "updated_by": {
                    "description": "UpdatedBy holds the value of the \"updated_by\" field.",
                    "type": "string"
                }
            }
        },
        "entity.Message": {
            "type": "object",
            "properties": {
                "content": {
                    "description": "Content holds the value of the \"content\" field.",
                    "type": "string"
                },
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "created_by": {
                    "description": "CreatedBy holds the value of the \"created_by\" field.",
                    "type": "string"
                },
                "event_id": {
                    "description": "EventID holds the value of the \"event_id\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "updated_by": {
                    "description": "UpdatedBy holds the value of the \"updated_by\" field.",
                    "type": "string"
                },
                "user_id": {
                    "description": "UserID holds the value of the \"user_id\" field.",
                    "type": "string"
                },
                "user_name": {
                    "description": "UserName holds the value of the \"user_name\" field.",
                    "type": "string"
                }
            }
        },
        "entity.Sport": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "color": {
                    "description": "Color holds the value of the \"color\" field.",
                    "type": "string"
                },
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "created_by": {
                    "description": "CreatedBy holds the value of the \"created_by\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the SportQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.SportEdges"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "image_url": {
                    "description": "ImageURL holds the value of the \"image_url\" field.",
                    "type": "string"
                },
                "max_teams": {
                    "description": "MaxTeams holds the value of the \"max_teams\" field.",
                    "type": "integer"
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.",
                    "type": "string"
                },
                "type": {
                    "description": "Type holds the value of the \"type\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/sport.Type"
                        }
                    ]
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "updated_by": {
                    "description": "UpdatedBy holds the value of the \"updated_by\" field.",
                    "type": "string"
                }
            }
        },
        "entity.Team": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "created_by": {
                    "description": "CreatedBy holds the value of the \"created_by\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the TeamQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.TeamEdges"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "max_players": {
                    "description": "MaxPlayers holds the value of the \"max_players\" field.",
                    "type": "integer"
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "updated_by": {
                    "description": "UpdatedBy holds the value of the \"updated_by\" field.",
                    "type": "string"
                }
            }
        },
        "entity.TeamUser": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "created_by": {
                    "description": "CreatedBy holds the value of the \"created_by\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the TeamUserQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.TeamUserEdges"
                        }
                    ]
                },
                "email": {
                    "description": "Email holds the value of the \"email\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "role": {
                    "description": "Role holds the value of the \"role\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/teamuser.Role"
                        }
                    ]
                },
                "status": {
                    "description": "Status holds the value of the \"status\" field.",
                    "type": "string"
                },
                "team_id": {
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "updated_by": {
                    "description": "UpdatedBy holds the value of the \"updated_by\" field.",
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "entity.User": {
            "type": "object",
            "required": [
                "email",
                "name"
            ],
            "properties": {
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "created_by": {
                    "description": "CreatedBy holds the value of the \"created_by\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the UserQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.UserEdges"
                        }
                    ]
                },
                "email": {
                    "description": "Email holds the value of the \"email\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.",
                    "type": "string"
                },
                "password": {
                    "description": "Password holds the value of the \"password\" field.",
                    "type": "string"
                },
                "roles": {
                    "description": "Roles holds the value of the \"roles\" field.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "updated_by": {
                    "description": "UpdatedBy holds the value of the \"updated_by\" field.",
                    "type": "string"
                }
            }
        },
        "entity.UserStats": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "created_by": {
                    "description": "CreatedBy holds the value of the \"created_by\" field.",
                    "type": "string"
                },
                "event_id": {
                    "description": "EventID holds the value of the \"event_id\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "stat_id": {
                    "description": "StatID holds the value of the \"stat_id\" field.",
                    "type": "string"
                },
                "stat_value": {
                    "description": "StatValue holds the value of the \"stat_value\" field.",
                    "type": "integer"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "updated_by": {
                    "description": "UpdatedBy holds the value of the \"updated_by\" field.",
                    "type": "string"
                },
                "user_id": {
                    "description": "UserID holds the value of the \"user_id\" field.",
                    "type": "string"
                }
            }
        },
        "event.EventType": {
            "type": "string",
            "enum": [
                "match",
                "match",
                "training"
            ],
            "x-enum-varnames": [
                "DefaultEventType",
                "EventTypeMatch",
                "EventTypeTraining"
            ]
        },
        "sport.Type": {
            "type": "string",
            "enum": [
                "team",
                "individual",
                "team"
            ],
            "x-enum-varnames": [
                "DefaultType",
                "TypeIndividual",
                "TypeTeam"
            ]
        },
        "teamuser.Role": {
            "type": "string",
            "enum": [
                "player",
                "player",
                "coach"
            ],
            "x-enum-varnames": [
                "DefaultRole",
                "RolePlayer",
                "RoleCoach"
            ]
        }
    }
}